# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009 - 2014, Stephen McDonald
# This file is distributed under the same license as the Mezzanine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mezzanine 3.1.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-03 10:42+1000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../content-architecture.rst:3
# e01f97ae3c55446d80de6a60ea9a8a13
msgid "Content Architecture"
msgstr ""

#: ../content-architecture.rst:5
# 72e70fa3ca64454287e81d34a97afa0e
msgid "Content in Mezzanine primarily revolves around the models found in two packages, ``mezzanine.core`` and ``mezzanine.pages``. Many of these models are abstract, and very small in scope, and are then combined together as the building blocks that form the models you'll actually be exposed to, such as ``mezzanine.core.models.Displayable`` and ``mezzanine.core.pages.Page``, which are the two main models you will inherit from when building your own models for content types."
msgstr ""

#: ../content-architecture.rst:13
# eb08a3acdb864575aced05798acaff23
msgid "Before we look at ``Displayable`` and ``Page``, here's a quick list of all the abstract models used to build them:"
msgstr ""

#: ../content-architecture.rst:16
# debdcc48cac645b0b293210b57a245ff
msgid "``mezzanine.core.models.SiteRelated`` - Contains a related ``django.contrib.sites.models.Site`` field."
msgstr ""

#: ../content-architecture.rst:18
# cc35eb013ec64d63afac70da9a73b3cb
msgid "``mezzanine.core.models.Slugged`` - Implements a title and URL (slug)."
msgstr ""

#: ../content-architecture.rst:20
# 81cbaca185614053a4f6bb775335d22b
msgid "``mezzanine.core.models.MetaData`` - Provides SEO meta data, such as title, description and keywords."
msgstr ""

#: ../content-architecture.rst:22
# a0e3bfec4332412a93929d6ecc059304
msgid "``mezzanine.core.models.TimeStamped`` - Provides created and updated timestamps."
msgstr ""

#: ../content-architecture.rst:24
# 67658620fd984f17b8de2808644cd925
msgid "``mezzanine.core.models.Displayable`` - Combines all the models above, then implements publishing features, such as status and dates."
msgstr ""

#: ../content-architecture.rst:27
# 6c455f833e3748f68eea76246528b915
msgid "``mezzanine.core.models.Ownable`` - Contains a related user field, suitable for content owned by specific authors."
msgstr ""

#: ../content-architecture.rst:29
# 8b71a755926a405db2209025af7d40a9
msgid "``mezzanine.core.models.RichText`` - Provides a WYSIWYG editable field."
msgstr ""

#: ../content-architecture.rst:31
# 30fb5844bdfc4c349f462f0606f19684
msgid "``mezzanine.core.models.Orderable`` - Used to implement drag/drop ordering of content, whether out of the box as Django admin inlines, or custom such as Mezzanine's page tree."
msgstr ""

#: ../content-architecture.rst:35
# 21204323e599474bac10b6f513b8ba8e
msgid "And for completeness, here are the primary content types provided out of the box to end users, that make use of ``Displayable`` and ``Page``:"
msgstr ""

#: ../content-architecture.rst:39
# d602c84f587a45ee98f81dabf7a2255c
msgid "``mezzanine.blog.models.BlogPost`` - Blog posts that subclass ``Displayable`` as they're not part of the site's navigation."
msgstr ""

#: ../content-architecture.rst:41
# 7e7e11f5b1e847b3bc775d694c379834
msgid "``mezzanine.pages.models.RichTextPage`` - Default ``Page`` subclass, providing a WYSIWYG editable field."
msgstr ""

#: ../content-architecture.rst:43
# f45e529c85c240d8a46433e184f2d9de
msgid "``mezzanine.pages.models.Link`` - ``Page`` subclass for links pointing to other URLs."
msgstr ""

#: ../content-architecture.rst:45
# f42b0660040048b8b302c662a31de6e6
msgid "``mezzanine.forms.models.Form`` - ``Page`` subclass for building forms."
msgstr ""

#: ../content-architecture.rst:47
# 4d3c7e5d3b084273bbda19ca0ea2a5e2
msgid "``mezzanine.galleries.models.Gallery`` - ``Page`` subclass for building image gallery pages."
msgstr ""

#: ../content-architecture.rst:50
# 2da548a7b5544f6baa1d210e0a4541a2
msgid "These certainly serve as examples for implementing your own types of content."
msgstr ""

#: ../content-architecture.rst:54
# 22cd48eea0d34767b476e605fb1f3249
msgid "``Displayable`` vs ``Page``"
msgstr ""

#: ../content-architecture.rst:56
# 230e8c96ccdb4c44a6fe38da94ffe94e
msgid "``Displayable`` itself is also an abstract model, that at its simplest, is used to represent content that contains a URL (also known as a slug). It also provides the core features of content such as:"
msgstr ""

#: ../content-architecture.rst:60
# 5d057d6a82064953a043e53ac48ed38c
msgid "Meta data such as a title, description and keywords."
msgstr ""

#: ../content-architecture.rst:61
# 9679166a87e7475aa7aed8d2f4fc1538
msgid "Auto-generated slug from the title."
msgstr ""

#: ../content-architecture.rst:62
# 841d6958c3cf4bd78bf31d725702b508
msgid "Draft/published status with the ability to preview drafts."
msgstr ""

#: ../content-architecture.rst:63
# 284da00dfd03469ba9b6df01e78fec8c
msgid "Pre-dated publishing."
msgstr ""

#: ../content-architecture.rst:64
# 4775c205236d4a5897a85217188411d5
msgid "Searchable by Mezzanine's :doc:`search-engine`."
msgstr ""

#: ../content-architecture.rst:66
# fd4e6ced9bc54511b9073d67ddd8c191
msgid "Subclassing ``Displayable`` best suits low-level content that doesn't form part of the site's navigation - such as blog posts, or events in a calendar. Unlike ``Page``, there's nothing particularly special about the ``Displayable`` model - it simply provides a common set of features useful to content."
msgstr ""

#: ../content-architecture.rst:72
# 86439effe5184f99af3c5b6a060ab0c6
msgid "In contrast, the concrete ``Page`` model forms the primary API for building a Mezzanine site. It extends ``Displayable``, and implements a hierarchical navigation tree. The rest of this section of the documentation will focus on the ``Page`` model, and the way it is used to build all the types of content a site will have available."
msgstr ""

#: ../content-architecture.rst:79
# 6b209bc8135347fea412822d0cc01a1f
msgid "The ``Page`` Model"
msgstr ""

#: ../content-architecture.rst:81
# 971067f1fb0445d7aa1f894bad23d7dd
msgid "The foundation of a Mezzanine site is the model ``mezzanine.pages.models.Page``. Each ``Page`` instance is stored in a hierarchical tree to form the site's navigation, and an interface for managing the structure of the navigation tree is provided in the admin via ``mezzanine.pages.admin.PageAdmin``. All types of content inherit from the ``Page`` model and Mezzanine provides a default content type via the ``mezzanine.pages.models.RichTextPage`` model which simply contains a WYSIWYG editable field for managing HTML content."
msgstr ""

#: ../content-architecture.rst:93
# b025cea46a1f4f3fbc64d77b8beac1ab
msgid "Creating Custom Content Types"
msgstr ""

#: ../content-architecture.rst:95
# 3d0e2288def84c288e796135b7faf32a
msgid "In order to handle different types of pages that require more structured content than provided by the ``RichTextPage`` model, you can simply create your own models that inherit from ``Page``. For example if we wanted to have pages that were authors with books::"
msgstr ""

#: ../content-architecture.rst:116
# 3f87a1fa90a74749902c6caf6a2f6745
msgid "Next you'll need to register your model with Django's admin to make it available as a content type. If your content type only exposes some new fields that you'd like to make editable in the admin, you can simply register your model using the ``mezzanine.pages.admin.PageAdmin`` class::"
msgstr ""

#: ../content-architecture.rst:128
# 5126cf8746be4c379fe09f782862bace
msgid "Any regular model fields on your content type will be available when adding or changing an instance of it in the admin. This is similar to Django's behaviour when registering models in the admin without using an admin class, or when using an admin class without fieldsets defined. In these cases all the fields on the model are available in the admin."
msgstr ""

#: ../content-architecture.rst:134
# 3d944ca3a68e47ccafd91549048cb12a
msgid "If however you need to customize your admin class, you can inherit from ``PageAdmin`` and implement your own admin class. The only difference is that you'll need to take a copy of ``PageAdmin.fieldsets`` and modify it if you want to implement your own fieldsets, otherwise you'll lose the fields that the ``Page`` model implements::"
msgstr ""

#: ../content-architecture.rst:156
# 1a336a1507a14c639c10bc6ac60f861d
msgid "When registering content type models with ``PageAdmin`` or subclasses of it, the admin class won't be listed in the admin index page, instead being made available as a type of ``Page`` when creating new pages from the navigation tree."
msgstr ""

#: ../content-architecture.rst:163
# 95dcfa50a2ee44e3b96f425892e6b9de
msgid "When creating custom content types, you must inherit directly from the ``Page`` model. Further levels of subclassing are currently not supported. Therefore you cannot subclass the ``RichTextPage`` or any other custom content types you create yourself. Should you need to implement a WYSIWYG editable field in the way the ``RichTextPage`` model does, you can simply subclass both ``Page`` and ``RichText``, the latter being imported from ``mezzanine.core.models``."
msgstr ""

#: ../content-architecture.rst:173
# b92c35caede04e8f8d1a28c01133c69d
msgid "Displaying Custom Content Types"
msgstr ""

#: ../content-architecture.rst:175
# 80a0b93706d84e0cb0cbec129c66e0a7
msgid "When creating models that inherit from the ``Page`` model, multi-table inheritance is used under the hood. This means that when dealing with the page object, an attribute is created from the subclass model's name. So given a ``Page`` instance using the previous example, accessing the ``Author`` instance would be as follows::"
msgstr ""

#: ../content-architecture.rst:187
# e65013c432ac48418943ffcbc9b902f8
msgid "And in a template::"
msgstr ""

#: ../content-architecture.rst:195
# 5a1bac36d019467186436d0a75f3fb1a
msgid "The ``Page`` model also contains the method ``Page.get_content_model`` for retrieving the custom instance without knowing its type::"
msgstr ""

#: ../content-architecture.rst:202
# b987718ef0184566bd217f0f7b9b3dbe
msgid "Page Templates"
msgstr ""

#: ../content-architecture.rst:204
# 8fe283e97607492e866b29c8b58136f0
msgid "The view function ``mezzanine.pages.views.page`` handles returning a ``Page`` instance to a template. By default the template ``pages/page.html`` is used, but if a custom template exists it will be used instead. The check for a custom template will first check for a template with the same name as the ``Page`` instance's slug, and if not then a template with a name derived from the subclass model's name is checked for. So given the above example the templates ``pages/dr-seuss.html`` and ``pages/author.html`` would be checked for respectively."
msgstr ""

#: ../content-architecture.rst:214
# b0c41e93af21416095b884417dbf9586
msgid "The view function further looks through the parent hierarchy of the ``Page``. If a ``Page`` instance with slug ``authors/dr-seuss`` is a child of the ``Page`` with slug ``authors``, the templates ``pages/authors/dr-seuss.html``, ``pages/authors/dr-seuss/author.html``, ``pages/authors/author.html``, ``pages/author.html``, and ``pages/page.html`` would be checked for respectively. This lets you specify a template for all children of a ``Page`` and a different template for the ``Page`` itself. For example, if an additional author were added as a child page of ``authors/dr-seuss`` with the slug ``authors/dr-seuss/theo-lesieg``, the template ``pages/authors/dr-seuss/author.html`` would be among those checked."
msgstr ""

#: ../content-architecture.rst:226
# 7e4c18d581d042f1af57b0bb2aa88c83
msgid "Overriding vs Extending Templates"
msgstr ""

#: ../content-architecture.rst:228
# 7501829cffd2403b84a6178bb0fd88a6
msgid "A typical problem that reusable Django apps face, is being able to extend the app's templates rather than overriding them. The app will usually provide templates that the app will look for by name, which allows the developer to create their own versions of the templates in their project's templates directory. However if the template is sufficiently complex, with a good range of extendable template blocks, they need to duplicate all of the features of the template within their own version. This may cause the project's version of the templates to become incompatible as new versions of the upstream app become available."
msgstr ""

#: ../content-architecture.rst:239
# da2aac70e66c452fb5b414af7530b220
msgid "Ideally we would be able to use Django's ``extends`` tag to extend the app's template instead, and only override the template blocks we're interested in. The problem with this however, is that the app will attempt to load the template with a specific name, so we can't override *and* extend a template at the same time, as circular inheritance will occur, e.g. Django thinks the template is trying to extend itself, which is impossible."
msgstr ""

#: ../content-architecture.rst:247
# d7c35d8235114d8fbc96fd5b48832010
msgid "To solve this problem, Mezzanine provides the ``overextends`` template tag, which allows you to extend a template with the same name. The ``overextends`` tag works the same way as Django's ``extends`` tag, (in fact it subclasses it), so it must be the first tag in the template. What it does differently is that the template using it will be excluded from loading when Django searches for the template to extend from."
msgstr ""

#: ../content-architecture.rst:255
# 1fcb94f795b4489cbfb69da12978d48d
msgid "Page Processors"
msgstr ""

#: ../content-architecture.rst:257
# 55bcb2e145d04afbb736ddff1861b50e
msgid "So far we've covered how to create and display custom types of pages, but what if we want to extend them further with more advanced features? For example adding a form to the page and handling when a user submits the form. This type of logic would typically go into a view function, but since every ``Page`` instance is handled via the view function ``mezzanine.pages.views.page`` we can't create our own views for pages. Mezzanine solves this problem using *Page Processors*."
msgstr ""

#: ../content-architecture.rst:265
# fe77b2453e1f44eebdc501600ee84f57
msgid "*Page Processors* are simply functions that can be associated to any custom ``Page`` models and are then called inside the ``mezzanine.pages.views.page`` view when viewing the associated ``Page`` instance. A Page Processor will always be passed two arguments - the request and the ``Page`` instance, and can either return a dictionary that will be added to the template context, or it can return any of Django's ``HttpResponse`` classes which will override the ``mezzanine.pages.views.page`` view entirely."
msgstr ""

#: ../content-architecture.rst:274
# 8ed523b51de049ebb25b1a2b9ef9b3bc
msgid "To associate a Page Processor to a custom ``Page`` model you must create the function for it in a module called ``page_processors.py`` inside one of your ``INSTALLED_APPS`` and decorate it using the decorator ``mezzanine.pages.page_processors.processor_for``."
msgstr ""

#: ../content-architecture.rst:279
# ce53bd010c7245359f74eca5b22d241d
msgid "Continuing on from our author example, suppose we want to add an enquiry form to each author page. Our ``page_processors.py`` module in the author app would be as follows::"
msgstr ""

#: ../content-architecture.rst:303
# e7c3fc9a0ace4010a2b28271a18737f1
msgid "The ``processor_for`` decorator can also be given a ``slug`` argument rather than a Page subclass. In this case the Page Processor will be run when the exact slug matches the page being viewed."
msgstr ""

#: ../content-architecture.rst:308
# 4a7208fd6e2d42fb8deacfccd18dd47a
msgid "Page Permissions"
msgstr ""

#: ../content-architecture.rst:310
# c7b42d6bd3384373af353dc9d0cb41ee
msgid "The navigation tree in the admin where pages are managed will take into account any permissions defined using `Django's permission system <http://docs.djangoproject.com/en/dev/topics/auth/#permissions>`_. For example if a logged in user doesn't have permission to add new instances of the ``Author`` model from our previous example, it won't be listed in the types of pages that user can add when viewing the navigation tree in the admin."
msgstr ""

#: ../content-architecture.rst:318
# 3dd01d6f5760448b9638101ad386cde7
msgid "In conjunction with Django's permission system, the ``Page`` model also implements the methods ``can_add``, ``can_change``, ``can_delete``, and ``can_move``. These methods provide a way for custom page types to implement their own permissions by being overridden on subclasses of the ``Page`` model."
msgstr ""

#: ../content-architecture.rst:324
# 478cfe2ff1c44b19a59cc4dd6eb59436
msgid "With the exception of ``can_move``, each of these methods takes a single argument which is the current request object, and return a Boolean. This provides the ability to define custom permission methods with access to the current user as well."
msgstr ""

#: ../content-architecture.rst:331
# 7e01e1720bfa417d9bc2cdbf39c52165
msgid "The ``can_add`` permission in the context of an existing page has a different meaning than in the context of an overall model as is the case with Django's permission system. In the case of a page instance, ``can_add`` refers to the ability to add child pages."
msgstr ""

#: ../content-architecture.rst:336
# c1d60deb2f1340a89345cfd2ef0a85ff
msgid "The ``can_move`` method has a slightly different interface, as it needs an additional argument, which is the new parent should the move be completed, and an additional output, which is a message to be displayed when the move is denied. The message helps justify reverting the page to its position prior to the move, and is displayed using Django messages framework. Instead of a Boolean return value, ``can_move`` raises a ``PageMoveException`` when the move is denied, with an optional argument representing the message to be displayed. In any case, ``can_move`` does not return any values."
msgstr ""

#: ../content-architecture.rst:348
# f51056a4f6944bcfbed263db38f5fa63
msgid "The ``can_move`` permission can only constrain moving existing pages, and is not observed when creating a new page. If you want to enforce the same rules when creating pages, you need to implement them explicitly through other means, such as the ``save`` method of the model or the ``save_model`` method of the model's admin."
msgstr ""

#: ../content-architecture.rst:355
# 1e1a660bee35439698d56f99bf4f356c
msgid "For example, if our ``Author`` content type should only contain one child page at most, can only be deleted when added as a child page (unless you're a superuser), and cannot be moved to a top-level position, the following permission methods could be implemented::"
msgstr ""

#: ../content-architecture.rst:377
# c1011be28a9949b48d400c31354ba352
msgid "Page Menus"
msgstr ""

#: ../content-architecture.rst:379
# 4745c0274618438bb9c81107356f4ade
msgid "We've looked closely at the aspects of individual pages, now let's look at displaying all of the pages as a hierarchical menu. A typical site may contain several different page menus, for example a menu that shows primary pages on the header of the site, with secondary pages as drop-down lists. Another type of menu would be a full or partial tree in a side-bar on the site. The footer may display a menu with primary and secondary pages grouped together as vertical lists."
msgstr ""

#: ../content-architecture.rst:387
# bc72aefb579d434d949aa7f2c7ad3c62
msgid "Mezzanine provides the ``page_menu`` template tag for rendering the above types of page menus, or any other type you can think of. The ``page_menu`` template tag is responsible for rendering a single branch of the page tree at a time, and accepts two optional arguments (you'll usually need to supply at least one of them) in either order. The arguments are the name of a menu template to use for a single branch within the page tree, and the parent menu item for the branch that will be rendered."
msgstr ""

#: ../content-architecture.rst:396
# bdd75f02c54e4fd28f859097622ce51f
msgid "The page menu template will be provided with a variable ``page_branch``, which contains a list of pages for the current branch. We can then call the ``page_menu`` template tag for each page in the branch, using the page as the parent argument to render its children. When calling the ``page_menu`` template tag from within a menu template, we don't need to supply the template name again, as it can be inferred. Note that by omitting the parent page argument for the ``page_menu`` template tag, the first branch rendered will be all of the primary pages, that is, all of the pages without a parent."
msgstr ""

#: ../content-architecture.rst:406
# 6e802ad9d9de4d929b205ce753a3dbae
msgid "Here's a simple menu example using two template files, that renders the entire page tree using unordered list HTML tags::"
msgstr ""

#: ../content-architecture.rst:424
# 771146c78c8445bbb2ad5ab70846389d
msgid "The first file starts off the menu without specifying a parent page so that primary pages are first rendered, and only passes in the menu template to use. The second file is the actual menu template that includes itself recursively for each branch in the menu. We could even specify a different menu template in the call to ``page_menu`` in our menu template, if we wanted to use a different layout for child pages."
msgstr ""

#: ../content-architecture.rst:432
# 1cd4e67aa1634adc881f1b02a02b29c5
msgid "Filtering Menus"
msgstr ""

#: ../content-architecture.rst:434
# c002db110a3f4cb3b4f1d9cb79f32ae9
msgid "Each ``Page`` instance has a field ``in_menus`` which specifies which menus the page should appear in. In the admin interface, the ``in_menus`` field is a list of checkboxes for each of the menu templates. The menu choices for the ``in_menus`` field are defined by the ``PAGE_MENU_TEMPLATES`` setting, which is a sequence of menu templates. Each item in the sequence is a three item sequence, containing a unique ID for the template, a label for the template, and the template path. For example in your ``settings.py`` module::"
msgstr ""

#: ../content-architecture.rst:449
# 53ed2c23490649ba8a55e1ddd0146179
msgid "Which of these entries is selected for new pages (all are selected by default) is controlled by the ``PAGE_MENU_TEMPLATES_DEFAULT`` setting. For example, ``PAGE_MENU_TEMPLATES_DEFAULT = (1, 3)`` will cause the admin section to pre-select the \"Top navigation bar\" and the \"Footer\" when using the example above."
msgstr ""

#: ../content-architecture.rst:455
# 024f1337e18c49f59380588d0e671e11
msgid "The selections made for the ``in_menus`` field on each page don't actually filter a page from being included in the ``page_branch`` variable that contains the list of pages for the current branch. Instead it's used to set the value of ``page.in_menu`` for each page in the menu template, so it's up to your menu template to check the page's ``in_menu`` attribute explicitly, in order to exclude it::"
msgstr ""

#: ../content-architecture.rst:475
# 03c14b391ea1410e8e003d7462452723
msgid "Note that if a menu template is not defined in the ``PAGE_MENU_TEMPLATES`` setting, the branch pages supplied to it will always have the ``in_menu`` attribute set to ``True``, so the only way this will be ``False`` is if the menu template has been added to ``PAGE_MENU_TEMPLATES``, and then *not* selected for a page in the admin interface."
msgstr ""

#: ../content-architecture.rst:483
# dc8f7ad37a184710b38e6474b0fe777f
msgid "Menu Variables"
msgstr ""

#: ../content-architecture.rst:485
# 323a5cf21b344c71ad79170d48ec65c7
msgid "The ``page_menu`` template tag provides a handful of variables, both in the template context, and assigned to each page in the branch, for helping you to build advanced menus."
msgstr ""

#: ../content-architecture.rst:489
# 84103cc27df9412abd3ece5c360a0d84
msgid "``page_branch`` - a list of pages for the current branch"
msgstr ""

#: ../content-architecture.rst:490
# a3c3de36abd44a00a640a1135aace237
msgid "``on_home`` - a boolean for whether the homepage is being viewed"
msgstr ""

#: ../content-architecture.rst:491
# 3ab5d5325dd6466597a8f828ac074d57
msgid "``has_home`` - a boolean for whether a page object exists for the homepage, which is used to check whether a hard-coded link to the homepage should be used in the page menu"
msgstr ""

#: ../content-architecture.rst:494
# 173e055858514e9b96fcc47792493ce7
msgid "``branch_level`` - an integer for the current branch depth"
msgstr ""

#: ../content-architecture.rst:495
# a8a7e6a8281a421c921221302256a03c
msgid "``page_branch_in_menu`` - a boolean for whether this branch should be in the menu (see \"filtering menus\" below)"
msgstr ""

#: ../content-architecture.rst:497
# 666bf7f48bb84fcab31cd008bc734e91
msgid "``parent_page`` - a reference to the parent page"
msgstr ""

#: ../content-architecture.rst:498
# b54a480cbe7e4e37900c2c0742a6dbf7
msgid "``page.parent`` - same as ``parent_page``."
msgstr ""

#: ../content-architecture.rst:499
# 66922fe5bfb14952819d1ce853b3273f
msgid "``page.in_menu`` - a boolean for whether the branch page should be in the menu (see \"filtering menus\" below)"
msgstr ""

#: ../content-architecture.rst:501
# 2bc7d143bea945c285fb72a7dc2e5958
msgid "``page.has_children`` - a boolean for whether the branch page has any child pages at all, disregarding the current menu"
msgstr ""

#: ../content-architecture.rst:503
# f9ab3c513e9341c08acab1200bb23b4c
msgid "``page.has_children_in_menu`` - a boolean for whether the branch page has any child pages that appear in the current menu"
msgstr ""

#: ../content-architecture.rst:505
# b4fe25a734324f0a8bed84ab21c1faa9
msgid "``page.num_children`` - an integer for the number of child pages the branch page has in total, disregarding the current menu"
msgstr ""

#: ../content-architecture.rst:507
# f3e05c2b585a46b2b6c92ca13f32b7c7
msgid "``page.num_children_in_menu`` - an integer for the number of child pages the branch page has, that also appear in the current menu"
msgstr ""

#: ../content-architecture.rst:509
# 52250ffa26c1486d98064022cd49c6ed
msgid "``page.is_current_child`` - a boolean for whether the branch page is a child of the current page being viewed"
msgstr ""

#: ../content-architecture.rst:511
# 899e6243dcff4ecb9a76103134dcf0f6
msgid "``page.is_current_sibling`` - a boolean for whether the branch page is a sibling (has the same parent) of the current page being viewed"
msgstr ""

#: ../content-architecture.rst:513
# 9767ddf0607e4b7dbf86214dbb19d338
msgid "``page.is_current_parent`` - a boolean for whether the branch page is the direct parent of the current page being viewed."
msgstr ""

#: ../content-architecture.rst:515
# 63e8e04a72e840b39a39bf01b575ee9f
msgid "``page.is_current_or_ascendant`` - a boolean for whether the branch page is the current page being viewed, or an ascendant (parent, grand-parent, etc) of the current page being viewed"
msgstr ""

#: ../content-architecture.rst:518
# add95cb1ec6b4c76966738a24ce58b76
msgid "``page.is_primary`` - a boolean for whether the branch page is a primary page (has no parent)"
msgstr ""

#: ../content-architecture.rst:520
# 26f86336966c472685400b90a0cd7c7c
msgid "``page.html_id`` - a unique string that can be used as the HTML ID attribute"
msgstr ""

#: ../content-architecture.rst:522
# 157de4c514c94a8aaefcacd6b9efe305
msgid "``page.branch_level`` - an integer for the branch page's depth"
msgstr ""

#: ../content-architecture.rst:524
# e0ba54fe6a9c44dc865dcbfc311b5c9f
msgid "Here's a commonly requested example of custom menu logic. Suppose you have primary navigation across the top of the site showing only primary pages, representing sections of the site. You then want to have a tree menu in a sidebar, that displays all pages within the section of the site currently being viewed. To achieve this we recursively move through the page tree, only drilling down through child pages if ``page.is_current_or_ascendant`` is ``True``, or if the page isn't a primary page. The key here is the ``page.is_current_or_ascendant`` check is only applied to the primary page, so all of its descendants end up being rendered. Finally, we also only display the link to each page if it isn't the primary page for the section::"
msgstr ""

#: ../content-architecture.rst:553
# 05243400b4f74906aca59159987fb61b
msgid "Integrating Third-party Apps with Pages"
msgstr ""

#: ../content-architecture.rst:555
# 79874782f82647ec9e4e6ff22474a74c
msgid "Sometimes you might need to use regular Django applications within your site, that fall outside of Mezzanine's page structure. Of course this is fine since Mezzanine is just Django - you can simply add the app's urlpatterns to your project's ``urls.py`` module like a regular Django project."
msgstr ""

#: ../content-architecture.rst:561
# 9b57825046ed4e449479d394b60b4502
msgid "A common requirement however is for pages in Mezzanine's navigation to point to the urlpatterns for these regular Django apps. Implementing this simply requires creating a page in the admin, with a URL matching a pattern used by the application. With that in place, the template rendered by the application's view will have a ``page`` variable in its context, that contains the current page object that was created with the same URL. This allows Mezzanine to mark the ``page`` instance as active in the navigation, and to generate breadcrumbs for the ``page`` instance as well."
msgstr ""

#: ../content-architecture.rst:571
# 0bd18e707afd464b9ff249f50e644d66
msgid "An example of this setup is Mezzanine's blog application, which does not use ``Page`` content types, and is just a regular Django app."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009 - 2014, Stephen McDonald
# This file is distributed under the same license as the Mezzanine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mezzanine 3.1.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-03 10:42+1000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../utilities.rst:4
# 55279e95534c483e9b2529c39eb2d582
msgid "Utilities"
msgstr ""

#: ../utilities.rst:6
# 5abca13ae68e4c69949a9a3435183fc6
msgid "The following section documents general utilities available with Mezzanine. While these aren't a core part of Mezzanine itself, they're widely used across many areas of Mezzanine, and can be very useful in conjunction with your own custom content and features."
msgstr ""

#: ../utilities.rst:11
# 39b46fce219d49aba0a4f948c8f358dc
msgid "Firstly covered are the utilities found in the ``mezzanine.generic`` app, such as :ref:`keywords`, :ref:`comments`, and :ref:`ratings`. Each of these form a common pattern:"
msgstr ""

#: ../utilities.rst:15
# 1c43bab65bb840d1870b28bd17f5597f
msgid "A model is provided containing generic relationships using Django's `django.contrib.contenttypes <https://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/>`_ app"
msgstr ""

#: ../utilities.rst:17
# ac25a2f2b8c047fcbbc534af52e3ebc3
msgid "A custom model field is provided for defining relationships to the ``mezzanine.generic`` model, which can then be applied to any of your own models"
msgstr ""

#: ../utilities.rst:20
# d60d5ebfffda4753897bab0eadcbde98
msgid "The custom field injects extra fields onto your model, with de-normalized data populated on save"
msgstr ""

#: ../utilities.rst:22
# 17095cf93b3149bcbd12b611a3ca94e3
msgid "Template tags are provided for displaying the related data, forms for posting them, and views for handling form posts where applicable"
msgstr ""

#: ../utilities.rst:26
# aa5e1e645c564a8eb6dff9ca92f5ece0
msgid "For a complete implementation reference, take a look at the built-in blog app ``mezzanine.blog`` which makes use of all these."
msgstr ""

#: ../utilities.rst:29
# 2fe1a9f34fe84c1b915405573e3234c1
msgid "Lastly, some of the :ref:`templatetags` found within ``mezzanine.core.templatetags.mezzanine_tags`` are covered."
msgstr ""

#: ../utilities.rst:35
# 030dc122f382476eaa3da0b29ce7b992
msgid "Keywords"
msgstr ""

#: ../utilities.rst:37
# 2f6f0ea5b10a4d02bfc35ac572918972
msgid "Keywords provided by the ``mezzanine.generic`` app are pervasive throughout Mezzanine. They're assigned to both the ``Page`` model and the ``Displayable`` model from which it's derived. Given that these models form the foundation of most content within Mezzanine, more often than not you're dealing with models that are already using keywords."
msgstr ""

#: ../utilities.rst:43
# 312a265b2313495a92bbc5c6cf48b12e
msgid "Suppose we have a regular Django model though, such as our ``Book`` example from the previous example in :doc:`content-architecture`::"
msgstr ""

#: ../utilities.rst:54
# 73f117ab1f5143219344664c50175d62
msgid "When editing ``Book`` instances in the admin, we'll now be able to choose keywords from the pool of keywords used throughout the site, and also assign new keywords if needed. We can then easily query for books given any keywords::"
msgstr ""

#: ../utilities.rst:61
# 9f8ab262806f4c4ba098f79a0536138e
msgid "Given a ``Book`` instance in a template, we can also display the book's keywords using the ``keywords_for`` template tag, which will inject a list of keywords into the template, using the ``as var_name`` variable name argument supplied to it::"
msgstr ""

#: ../utilities.rst:78
# 1c5c10a7c2c444afb6b54c75539a71f1
msgid "You'll see here each ``Keyword`` instance has a slug field - we use it in a fictitious urlpattern called ``books_for_keyword``, which could then retrieve books for a given keyword by slug::"
msgstr ""

#: ../utilities.rst:84
# 77b805e0b40f481e94ec41a9752aebcc
msgid "Any model with a ``KeywordsField`` field assigned to it will have a ``FIELD_NAME_string`` field assigned to it, where ``FIELD_NAME`` is the name given to the ``KeywordsField`` attribute on your model, which would be ``Book.keywords_string`` in the above example. Each time keywords change, the ``keywords_string`` field is populated with a comma separated string list of each of the keywords. This can be used in conjunction with Mezzanine's :doc:`search-engine` - behavior that is provided by default for the ``Page`` and ``Displayable`` models."
msgstr ""

#: ../utilities.rst:96
# d58404bd6921424aa3b6b95286204a67
msgid "Threaded Comments"
msgstr ""

#: ../utilities.rst:98
# 403649d5ff92472a95e259cc6624e7c3
msgid "Threaded comments provided by the ``mezzanine.generic`` app are an extension of Django's `django.contrib.comments <https://docs.djangoproject.com/en/dev/ref/contrib/comments/>`_ app. Mezzanine's threaded comments fundamentally extend Django's comments to allow for threaded conversations, where comments can be made in reply to other comments."
msgstr ""

#: ../utilities.rst:105
# 854d019538d348bf8bc0f88b8fb2dfe1
msgid "Again as with our ``Book`` example, suppose we wanted to added threaded conversations to our book pages in templates, we first define comments on the ``Book`` model::"
msgstr ""

#: ../utilities.rst:117
# e3ceac9719b243b8942b44666d32c40a
msgid "Then given a ``Book`` instance named ``book`` in a template::"
msgstr ""

#: ../utilities.rst:124
# c2972c63545941be96dc78474cb8bf06
msgid "The ``comments_for`` template tag is a Django `inclusion tag <https://docs.djangoproject.com/en/dev/howto/custom-template-tags/#howto-custom-template-tags-inclusion-tags>`_, that includes the template ``generic/includes/comments.html``, which recursively includes the template ``generic/includes/comment.html`` to build up the threaded conversation. To customize the look and feel of the threaded conversation, simply override these templates in your project."
msgstr ""

#: ../utilities.rst:132
# e7113871d9414102a5d16f7b0327f629
msgid "As you can see in the template example we have a ``Book.comments_count`` field injected onto our ``Book`` model. This works the same way as described above for the ``KeywordsField``, where the name is derived from the name given to the ``CommentsField`` attribute on the model, and updated each time the number of comments change."
msgstr ""

#: ../utilities.rst:139
# 9ea100137b9d470a8c59197d19dfa8c1
msgid "You can also require that users must be logged in to comment. This is controlled by setting the ``COMMENTS_ACCOUNT_REQUIRED`` setting to ``True``. In this case, the comment form will still be displayed, but on submitting a comment, the user will be redirected to the login/signup page, where after logging in, their comment will be posted without having to re-submit it. See the :doc:`user-accounts` section for full details on configuring public user accounts in Mezzanine."
msgstr ""

#: ../utilities.rst:150
# fda1041218f64727b9a7c8b2cd578971
msgid "Ratings"
msgstr ""

#: ../utilities.rst:152
# cb3eebaf47ff489fb7e61dc7f871b99f
msgid "The ratings provided by the ``mezzanine.generic`` app allow people to give a rating for any model that has ratings set up. Suppose we wanted to allow people to rate our books from 1 to 10, first we define what the rating range is via the ``RATINGS_RANGE`` setting::"
msgstr ""

#: ../utilities.rst:159
# 11e320de40364ccebfa718da7f1062a4
msgid "And then add ratings to our ``Book`` model::"
msgstr ""

#: ../utilities.rst:169
# 52dca42e2cad4b4a948a338de4c013c9
msgid "And then in our book template::"
msgstr ""

#: ../utilities.rst:175
# 6266396c076641639e0455ef7214bee1
msgid "The ``rating_for`` template tag is another inclusion tag, which uses the template ``generic/includes/rating.html``. It simply displays the current average rating, and a form with radio buttons for rating. You may wish to customize this and use visual icons, like stars, for the ratings."
msgstr ""

#: ../utilities.rst:181
# acb92653ae034768aff53676ca74672d
msgid "Like the other custom fields in ``mezzanine.generic``, the ``RatingField`` will inject fields derived from its attribute name onto the model which it's assigned to, which are updated when a new rating is made. Given our ``Book`` example, the ``RatingField`` would inject:"
msgstr ""

#: ../utilities.rst:187
# aba9e58a97b14d88bb5b4676b7ebb72f
msgid "``Book.rating_average`` - average rating"
msgstr ""

#: ../utilities.rst:188
# 1bca22c8cebb457e8eac5dcb01a91289
msgid "``Book.rating_sum`` - total sum of all ratings"
msgstr ""

#: ../utilities.rst:189
# 0a86741e510c49f8a3e40f2d0f3f4e2c
msgid "``Book.rating_count`` - total count of all ratings"
msgstr ""

#: ../utilities.rst:191
# f932fa1dc0184b539ee58b5a7d410ff1
msgid "Like threaded comments, ratings can be limited to authenticated users by setting the ``RATINGS_ACCOUNT_REQUIRED`` setting to ``True``."
msgstr ""

#: ../utilities.rst:197
# 889bd62125e04089ab2de79c6b3bc14b
msgid "General Template Tags"
msgstr ""

#: ../utilities.rst:199
# dc0cdcda0d8c4322ac58c4e8482452a6
msgid "Following are some template tags defined in ``mezzanine.core.templatetags.mezzanine_tags`` - they're general purpose and can be used across a variety of scenarios."
msgstr ""

#: ../utilities.rst:204
# f9df5e401b5e47959f0258dc4d286753
msgid "``fields_for``"
msgstr ""

#: ../utilities.rst:206
# 5e113fedaa34412c93511d4fc8c12c84
msgid "The ``fields_for`` template tag is an inclusion tag that takes a form object as its single argument, and renders the fields for the form. It uses the template ``core/templates/form_fields.html``, which can then be overridden to customize the look and feel of all forms throughout a Mezzanine site::"
msgstr ""

#: ../utilities.rst:220
# 8c57c66cb4894165a888e5a4da504c3e
msgid "``sort_by``"
msgstr ""

#: ../utilities.rst:222
# 4d722f800dd6443fa5f6f5d26cb45a73
msgid "The ``sort_by`` template tag is a general sorting utility. It's a filter tag similar to Django's `dictsort <https://docs.djangoproject.com/en/dev/ref/templates/builtins/#std:templatefilter-dictsort>`_ filter tag, but instead of only accepting sequences of dicts and a key name, it also accepts sequences of objects and an attribute name, making it much more general purpose."
msgstr ""

#: ../utilities.rst:229
# 902ac825ccd940738833243375492ec4
msgid "Here's an example with the ``keywords_for`` tag described above, which assigns an ``item_count`` attribute to each keyword returned to the template::"
msgstr ""

#: ../utilities.rst:241
# ad19049e004b442ab56b90016648043c
msgid "``thumbnail``"
msgstr ""

#: ../utilities.rst:243
# bb698b0751844a28a777a01a85ab0523
msgid "The ``thumbnail`` template tag provides on-the-fly image resizing. It takes the relative path to the image file to resize, and mandatory width and height arguments."
msgstr ""

#: ../utilities.rst:247
# a3c0a49028de4bb88bee8f0561e28ae3
msgid "When the ``thumbnail`` template tag is called for a given set of arguments the first time, the thumbnail is generated and its relative path is returned. Subsequent calls with the same arguments will return the same thumbnail path, without resizing it again, so resizes only occur when first requested."
msgstr ""

#: ../utilities.rst:253
# 3bdba3422858429ebd1dcd28d678de0a
msgid "Given our book example's ``Book.cover`` field, suppose we wanted to render cover thumbnails with a 100 pixel width, and proportional height::"
msgstr ""

#: ../utilities.rst:261
# b72033460b964966a367cb031340892f
msgid "The ``thumbnail`` template tag also accepts several other optional arguments for controlling the generated thumbnail:"
msgstr ""

#: ../utilities.rst:264
# 6b97c71a76ad44d797effd4ec29c07df
msgid "``quality`` - A value from 0 to 100 controlling the JPG quality (defaults to 95)"
msgstr ""

#: ../utilities.rst:266
# 7c4e23a53e53492f81da843ea9ceba41
msgid "``left`` and ``top`` - Values from 0 to 1 controlling where the image will be cropped (each defaults to 0.5, namely the center)"
msgstr ""

#: ../utilities.rst:268
# 61edc2627fdc4dff9eb3a0395f5ab8ab
msgid "``padding`` - A boolean controlling whether the thumbnail will be padded rather than cropped (default to False)"
msgstr ""

#: ../utilities.rst:270
# 03fef3b2222a474593693f6856eb01f9
msgid "``padding_color`` - RGB string controlling the background color when ``padding`` is True (defaults to \"#fff\")"
msgstr ""


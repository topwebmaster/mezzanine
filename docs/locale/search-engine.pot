# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009 - 2014, Stephen McDonald
# This file is distributed under the same license as the Mezzanine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mezzanine 3.1.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-03 10:42+1000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../search-engine.rst:3
# 724c0a1cf6b1489c993c1d3cfb4c570f
msgid "Search Engine"
msgstr ""

#: ../search-engine.rst:5
# 8cac1f5664c84a22b22cdbe7c0ba57c8
msgid "Mezzanine provides a built-in search engine that allows site visitors to search across different types of content. It includes several tools that enable developers to adjust the scope of the site search. It also includes a Search API to programmatically interact with the search engine, customize the way the search engine accesses different types of content, and perform search queries that are broken down and used to query models for results."
msgstr ""

#: ../search-engine.rst:13
# 7fb277799dbd475c9fb5fb061fadacc1
msgid "Search Form"
msgstr ""

#: ../search-engine.rst:15
# 4da6141093f74b499e23da1bd0946d62
msgid "Developers can easily customize the scope of the searches via the ``{% search_form %}`` template tag. A default list of searchable models can be specified in the ``SEARCH_MODEL_CHOICES`` setting. Only models that subclass ``mezzanine.core.models.Displayable`` should be used. In addition, the actual HTML form can be customized in the ``includes/search_form.html`` template."
msgstr ""

#: ../search-engine.rst:24
# 535364c65ef14b319ee751a13991f727
msgid "In ``SEARCH_MODEL_CHOICES`` and ``{% search_form %}``, all model names must be strings in the format ``app_label.model_name``. These models can be part of Mezzanine's core, or part of third party applications. However, all these model must subclass ``Page`` or ``Displayable``."
msgstr ""

#: ../search-engine.rst:29
# 565e601c0f3b4506aaa44178d2a01523
msgid "Using ``{% search_form \"all\" %}`` will render a search form with a dropdown menu, letting the user choose on what type of content the search will be performed. The dropdown will be populated with all of the models found in ``SEARCH_MODEL_CHOICES`` (default: pages and blog posts, with products added if Cartridge is installed)."
msgstr ""

#: ../search-engine.rst:35
# cad6653c4bf848fc9e9f2c8da140a0b0
msgid "By passing a sequence of space-separated models to the tag, only those models will be made available as choices to the user. For example, to offer search for only the ``Page`` and ``Product`` models (provided Cartridge is installed), you can use: ``{% search_form \"pages.Page shop.Product\" %}``."
msgstr ""

#: ../search-engine.rst:41
# db2951ec747e4f7ab4030842b07f3d77
msgid "If you don't want to provide users with a dropdown menu, you can limit the search scope to a single model, by passing the model name as a parameter. For example, to create a blog-only search form, you can use ``{% search_form \"blog.BlogPost\" %}``."
msgstr ""

#: ../search-engine.rst:46
# 00add72d1b0b48aea6aaa9da6434bc59
msgid "If no parameter is passed to ``{% search_form %}``, no drop-down will be provided, and the search will be performed on all models defined in the ``SEARCH_MODEL_CHOICES`` setting."
msgstr ""

#: ../search-engine.rst:50
# 9c6c5ab9c6984ce39f08cfbd0a7eecbe
msgid "Finally, by setting ``SEARCH_MODEL_CHOICES`` to ``None``, the search form will not contain a drop-down, but in this case all models that subclass ``Displayable`` will be automatically searched."
msgstr ""

#: ../search-engine.rst:55
# 1730df18c5ed4ca09941ac32b4239506
msgid "Search API"
msgstr ""

#: ../search-engine.rst:57
# 8ee7c03c55e3476f90e500e3f40b57e8
msgid "The main search API is provided by ``mezzanine.core.managers.SearchableManager``. This is a Django model manager that provides a custom ``search`` method. Adding search functionality to any model is as simple as using the ``SearchableManager`` as a manager for your model."
msgstr ""

#: ../search-engine.rst:65
# 55da37c71a8e40a5b12144ec7c3dea9b
msgid "By following the previous example outlined in :ref:`creating-custom-content-types` no extra work is required to have your custom content included in search queries, as the default search functionality in Mezzanine (defined in ``mezzanine.core.views.search``) automatically covers any models that inherit from ``mezzanine.pages.models.Page`` or ``mezzanine.core.models.Displayable``."
msgstr ""

#: ../search-engine.rst:72
# bee76b05bdc841e292bd6e6efd055c0d
msgid "In its most simple form, the ``search`` method takes a single string argument containing a search query and returns a Django queryset representing the results. For example, to search for all pages using the term **plans prices projects**::"
msgstr ""

#: ../search-engine.rst:81
# d1a870bf0cda44299a4f12ccbf89d002
msgid "It's also possible to explicitly control which fields will be used for the search. For example to search ``Page.title`` and ``Page.content`` only::"
msgstr ""

#: ../search-engine.rst:90
# 722a10e35bb34065a1ed4357ab412559
msgid "If ``search_fields`` is not provided in the call to ``search``, the fields used will be the default fields specified for the model. These are specified by providing a ``search_fields`` attribute on any model that uses the ``SearchableManager``. For example, if we wanted to add search capabilities to our ``GalleryImage`` model from the previous example in :ref:`creating-custom-content-types`::"
msgstr ""

#: ../search-engine.rst:117
# f1b8563838d246b084203785850e3872
msgid "If ``search_fields`` are not specified using any of the approaches above, then all ``CharField`` and ``TextField`` fields defined on the model are used. This isn't the case for ``Page`` subclasses though, since the ``Page`` model defines a ``search_fields`` attribute which your subclass will also contain, so you'll need to explicitly define ``search_fields`` yourself."
msgstr ""

#: ../search-engine.rst:125
# 17e5f2e0ec7945fe9331befe0e1d296b
msgid "Ordering Results"
msgstr ""

#: ../search-engine.rst:127
# b96aa85630c4463cab272fe25cec3d3f
msgid "By default, results are ordered by the number of matches found within the fields searched. It is possible to control the relative weight of a match found within one field over a match found in another field. Given the first example of searching ``Page`` instances, you might decide that a match within the ``title`` field is worth 5 times as much as a match in the ``description`` field. These relative weights can be defined in the same fashion as outlined above for defining the fields to be used in a search by using a slightly different format for the ``search_fields`` argument::"
msgstr ""

#: ../search-engine.rst:142
# 30d1921667c245ac9b07aafced03602e
msgid "As shown, a dictionary or mapping sequence can be used to associate weights to fields in any of the cases described above where ``search_fields`` can be defined."
msgstr ""

#: ../search-engine.rst:147
# 236a0606a20344aca6f87e161ca11df5
msgid "Searching Heterogeneous Models"
msgstr ""

#: ../search-engine.rst:149
# 0e6eadbb3ba54fe9ac291fec39317db0
msgid "So far we've looked at how to search across a single model, but what if we want to search across different types of models at once? This is possible through the use of abstract models. ``SearchableManager`` is designed so that if it is accessed directly through an abstract model, it will search across every model that subclasses the abstract model. This makes it possible to group together different types of models for the purpose of combined search. Continuing on from our ``GalleryImage`` example, suppose we also have a ``Document`` model containing files uploaded and that we wanted a combined search across these models which could both be conceptually defined as assets. We would then go ahead and create an abstract model called ``Asset`` for the sake of grouping these together for search::"
msgstr ""

#: ../search-engine.rst:179
# 525c365b12864726b44735a392e8014e
msgid "By accessing ``SearchableManager`` directly via the ``Asset`` abstract model we can search across the ``GalleryImage`` and ``Document`` models at once::"
msgstr ""

#: ../search-engine.rst:187
# 5ab6f8f4cdf4429da970d04238c0b75a
msgid "It was mentioned earlier that the ``search`` method returns a Django queryset meaning that you can then chain together further queryset methods onto the result. However when searching across heterogeneous models via an abstract model, this is not the case and the result is a list of model instances."
msgstr ""

#: ../search-engine.rst:193
# 195f853425d34ae6bb8b97e829eff909
msgid "Also of importance is the ``SEARCH_MODEL_CHOICES`` setting mentioned above. When searching across heterogeneous models via an abstract model, the models searched will only be used if they are defined within the ``SEARCH_MODEL_CHOICES`` setting, either explicitly, or implicitly by a model's parent existing in ``SEARCH_MODEL_CHOICES``."
msgstr ""

#: ../search-engine.rst:200
# 33bacdc874b440fcad2b692d4a58ec5e
msgid "Query Behaviour"
msgstr ""

#: ../search-engine.rst:202
# 833935a570634cc49f1b0d7d1e518a5c
msgid "When a call to ``SearchableManager.search`` is performed, the query entered is processed through several steps until it is translated into a Django queryset. By default the query is broken up into keywords, so the query **plans prices projects** would return results that contain any of the words **plans** or **prices** or **projects**."
msgstr ""

#: ../search-engine.rst:208
# e7a8e22f491049bab1f9cc054055e092
msgid "The query can contain several special operators which allow for this behaviour to be controlled further. Quotes around exact phrases will ensure that the phrase is searched for specifically, for example the query **\"plans prices\" projects** will return results matching the exact phrase **plans prices** or the word **projects**, in contrast to the previous example."
msgstr ""

#: ../search-engine.rst:215
# a0e795d834994363ad3d16f6525e98bc
msgid "You can also prefix both words and phrases with + or - symbols. The + symbol will ensure the word or phrase is contained in all results, and the - symbol will ensure that no results will be returned containing the word or phrase. For example the query **+\"plans prices\" -projects** would return results that must contain the phrase **plans prices** and must not contain the word **projects**."
msgstr ""

#: ../search-engine.rst:222
# 313a3145c08648a8b7dce8d988e429d0
msgid "Once the query has been parsed into words and phrases to be included or excluded, a second step is performed where the query is stripped of common words know as **stop words**. These are common words such as **and**, **the** or **like** that are generally not meaningful and cause irrelevant results to be returned. The list of stop words is stored in the setting ``STOP_WORDS`` as described in the :doc:`configuration` section."
msgstr ""


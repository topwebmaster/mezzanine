# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009 - 2014, Stephen McDonald
# This file is distributed under the same license as the Mezzanine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mezzanine 3.1.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-03 10:42+1000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../deployment.rst:3
# 78165621e390427c9978315bcec9e74d
msgid "Deployment"
msgstr ""

#: ../deployment.rst:5
# cbb864e2cd1642e98421e198f0fcd3e3
msgid "Deployment of a Mezzanine site to production is mostly identical to deploying a regular Django site. For serving static content, Mezzanine makes full use of Django's ``staticfiles`` app. For more information, see the Django docs for `deployment <https://docs.djangoproject.com/en/dev/howto/deployment/>`_ and `staticfiles <https://docs.djangoproject.com/en/dev/howto/static-files/>`_."
msgstr ""

#: ../deployment.rst:13
# d3fd95ed4ae54cc4a77bce4fc08814d4
msgid "Fabric"
msgstr ""

#: ../deployment.rst:15
# 7c7ed3847c28406b8804f18b149b71d5
msgid "Each Mezzanine project comes bundled with utilities for deploying production Mezzanine sites, using `Fabric <http://fabfile.org>`_. The provided ``fabfile.py`` contains composable commands that can be used to set up all the system-level requirements on a new `Debian <http://debian.org>`_ based system, manage each of the project-level virtual environments for initial and continuous deployments, and much more."
msgstr ""

#: ../deployment.rst:24
# dc0c602662f540519a43442c7b71bb7e
msgid "Server Stack"
msgstr ""

#: ../deployment.rst:26
# 228513cf23df4e9b96a78bb603e925aa
msgid "The deployed stack consists of the following components:"
msgstr ""

#: ../deployment.rst:28
# 3f461d30d4ad49a192caea863ee2687c
msgid "`NGINX <http://nginx.org>`_ - public facing web server"
msgstr ""

#: ../deployment.rst:29
# 767878bd35b648d5a6d2132d195a5825
msgid "`gunicorn <http://gunicorn.org>`_ - internal HTTP application server"
msgstr ""

#: ../deployment.rst:30
# 844e16e8823349d681e85e40321ca442
msgid "`PostgreSQL <http://postgresql.org>`_ - database server"
msgstr ""

#: ../deployment.rst:31
# 30c69015a9a341009ed8a70dfd2e56ff
msgid "`memcached <http://memcached.org>`_ - in-memory caching server"
msgstr ""

#: ../deployment.rst:32
# 718caa2067734cf78372a0d4f64cd462
msgid "`supervisord <http://supervisord.org>`_ - process control and monitor"
msgstr ""

#: ../deployment.rst:36
# 46b05116db084134b9369f5c0c529584
msgid "None of the items listed above are required for deploying Mezzanine, they're simply the components that have been chosen for use in the bundled ``fabfile.py``. Alternatives such as `Apache <http://httpd.apache.org/>`_ and `MySQL <http://www.mysql.com/>`_ will work fine, but you'll need to take care of setting these up and deploying yourself. Consult the Django documentation for more information on using different `web <https://docs.djangoproject.com/en/dev/howto/deployment/>`_ and `database <https://docs.djangoproject.com/en/dev/ref/databases/>`_ servers."
msgstr ""

#: ../deployment.rst:48
# e497e7595bab4b8f99410578fa0f9ef9
msgid "Configuration"
msgstr ""

#: ../deployment.rst:50
# d6f6c602196d4d0681fc301225c4eca8
msgid "Configurable variables are implemented in the project's ``settings.py`` module. Here's an example, that leverages some existing setting names::"
msgstr ""

#: ../deployment.rst:70
# e7924e0e1d5d4db398da924343579b39
msgid "Commands"
msgstr ""

#: ../deployment.rst:72
# 7628c850150a4cf0804609b32b671906
msgid "Here's the list of commands provided in a Mezzanine project's ``fabfile.py``. Consult the `Fabric documentation <http://fabfile.org>`_ for more information on working with these:"
msgstr ""

#: ../fabfile.rst:1
# 023cde7eda014ff8bee894409a4feca0
msgid "``fab all`` - Installs everything required on a new system and deploy."
msgstr ""

#: ../fabfile.rst:2
# 8cb741baab6d4f138c2a53a1cfb713a6
msgid "``fab apt`` - Installs one or more system packages via apt."
msgstr ""

#: ../fabfile.rst:3
# 274cde8083cf4a60a8da43204e4da549
msgid "``fab backup`` - Backs up the database."
msgstr ""

#: ../fabfile.rst:4
# 9eb2dcd05dca419da8106fdf6bda7f4b
msgid "``fab create`` - Create a new virtual environment for a project."
msgstr ""

#: ../fabfile.rst:5
# 467ad4314e3546d181e31918d5146ae6
msgid "``fab deploy`` - Deploy latest version of the project."
msgstr ""

#: ../fabfile.rst:6
# e5f6e7ed9b164ae8a7a91c053c066133
msgid "``fab install`` - Installs the base system and Python requirements for the entire server."
msgstr ""

#: ../fabfile.rst:7
# 5f49698a06364ca7a8ae60b946345bc3
msgid "``fab manage`` - Runs a Django management command."
msgstr ""

#: ../fabfile.rst:8
# ca9bb22dd25b4ae1b41dbf5ffea35048
msgid "``fab pip`` - Installs one or more Python packages within the virtual environment."
msgstr ""

#: ../fabfile.rst:9
# a82f5c970cb94f4cbd6c7ef7a6dad6ac
msgid "``fab psql`` - Runs SQL against the project's database."
msgstr ""

#: ../fabfile.rst:10
# 1af28309e0154c62b4e2d2475cf332c7
msgid "``fab python`` - Runs Python code in the project's virtual environment, with Django loaded."
msgstr ""

#: ../fabfile.rst:11
# 40c72507a1f2465faa3088e30c9919a3
msgid "``fab remove`` - Blow away the current project."
msgstr ""

#: ../fabfile.rst:12
# e00d4825cebe482c9fde6a64d0a0cb97
msgid "``fab restart`` - Restart gunicorn worker processes for the project."
msgstr ""

#: ../fabfile.rst:13
# 3f106a0bbcf74edabfdff64acd1fd61a
msgid "``fab restore`` - Restores the database."
msgstr ""

#: ../fabfile.rst:14
# bb7315d3054646219e24055260a17858
msgid "``fab rollback`` - Reverts project state to the last deploy."
msgstr ""

#: ../fabfile.rst:15
# 561d5cbac66a4d0a870eab4d9ff7b6f1
msgid "``fab run`` - Runs a shell comand on the remote server."
msgstr ""

#: ../fabfile.rst:16
# 679fd39c3cbc4a2d98a4712ce1519a68
msgid "``fab sudo`` - Runs a command as sudo."
msgstr ""


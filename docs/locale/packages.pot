# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009 - 2014, Stephen McDonald
# This file is distributed under the same license as the Mezzanine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mezzanine 3.1.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-03 10:42+1000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../packages.rst:3
# bf588334cd654c1d94e3c760da1cfe66
msgid "Packages"
msgstr ""

#: ../packages.rst:5
# e9a5a948f92b4b5da069d954f19dd45b
msgid "Below are auto-generated docs mostly covering each of the packages contained within Mezzanine that are added to ``settings.INSTALLED_APPS``."
msgstr ""

#: ../packages.rst:12
# 506942834ded452d85a1fa2d65b015c0
msgid "``mezzanine.boot``"
msgstr ""

#: ../../mezzanine/boot/__init__.py:docstring of mezzanine.boot:1
# 4ba165446406462db79fa513102e339b
msgid "An app that is forced to the top of the list in ``INSTALLED_APPS`` for the purpose of hooking into Django's ``class_prepared`` signal and adding custom fields as defined by the ``EXTRA_MODEL_FIELDS`` setting. Also patches ``django.contrib.admin.site`` to use ``LazyAdminSite`` that defers certains register/unregister calls until ``admin.autodiscover`` to avoid some timing issues around custom fields not being available when custom admin classes are registered."
msgstr ""

#: ../../mezzanine/boot/__init__.py:docstring of mezzanine.boot.add_extra_model_fields:1
# 249bb7e10a7c44c8a65224ee0023f67a
msgid "Injects custom fields onto the given sender model as defined by the ``EXTRA_MODEL_FIELDS`` setting."
msgstr ""

#: ../../mezzanine/boot/__init__.py:docstring of mezzanine.boot.autodiscover:1
# 8a35235e6c794146beeff4f4b749d5aa
msgid "Replaces django's original autodiscover to add a call to LazyAdminSite's lazy_registration."
msgstr ""

#: ../packages.rst:20
# d72fa1133e894a9b96ae6fc64280490f
msgid "``mezzanine.core``"
msgstr ""

#: ../../mezzanine/core/__init__.py:docstring of mezzanine.core:1
# 7fec205bb07845adb38e2595e9a9fb88
msgid "Provides abstract models and admin features used throughout the various Mezzanine apps."
msgstr ""

#: ../packages.rst:25
# a9b7e8a4ed3241f3b81caead6f070064
msgid "``mezzanine.core.models``"
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Displayable:1
# 056206e8c59e4c63832223d8c185702a
msgid "Abstract model that provides features of a visible page on the website such as publishing fields. Basis of Mezzanine pages, blog posts, and Cartridge products."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Displayable.get_absolute_url:1
# 68cc40159e7c4d01b1d3aea5d6a09dfd
msgid "Raise an error if called on a subclass without ``get_absolute_url`` defined, to ensure all search results contains a URL."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Displayable.get_next_by_publish_date:1
# 6d7b54013d5c4b2c9e368ad399ae47f0
msgid "Retrieves next object by publish date."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Displayable.get_previous_by_publish_date:1
# 55c99eec9e104f5e87e5fc9ad85258e3
msgid "Retrieves previous object by publish date."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Displayable.publish_date_since:1
# 1d6b31cfe8554920b59e4e59e738528d
msgid "Returns the time since ``publish_date``."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Displayable.save:1
# 3d969267086442269fa61cd693399fd1
msgid "Set default for ``publish_date``. We can't use ``auto_now_add`` on the field as it will be blank when a blog post is created from the quick blog form in the admin dashboard."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Displayable.set_short_url:1
# ed619e097c354d2e88b392f64dce51a3
msgid "Sets the ``short_url`` attribute using the bit.ly credentials if they have been specified, and saves it. Used by the ``set_short_url_for`` template tag, and ``TweetableAdmin``."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.MetaData:1
# 79acd6e28c4d411cb2e37a5ee04cb577
msgid "Abstract model that provides meta data for content."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.MetaData.description_from_content:1
# 6b343f11539a4760a968846a6c4e947d
msgid "Returns the first block or sentence of the first content-like field."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.MetaData.meta_title:1
# 45624d5438bf4ec49c15f98ec10840a6
msgid "Accessor for the optional ``_meta_title`` field, which returns the string version of the instance if not provided."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.MetaData.save:1
# f7cf550226644910af87e1d9d9f6d3dc
msgid "Set the description field on save."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Orderable:1
# 3f9a33451d8c43efa2eec30818ec4463
msgid "Abstract model that provides a custom ordering integer field similar to using Meta's ``order_with_respect_to``, since to date (Django 1.2) this doesn't work with ``ForeignKey(\"self\")``, or with Generic Relations. We may also want this feature for models that aren't ordered with respect to a particular field."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Orderable.delete:1
# 19c59d9aa04e42f4be59c28137e92207
msgid "Update the ordering values for siblings."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Orderable.get_next_by_order:1
# 822abd14e06a4abeb1c66d5391fde30b
msgid "Retrieves next object by order."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Orderable.get_previous_by_order:1
# 3d5d2879462b4a49a2f7a7d25949eaf4
msgid "Retrieves previous object by order."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Orderable.save:1
# 398364b8585445e9af85147f47893078
msgid "Set the initial ordering value."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Orderable.with_respect_to:1
# a1419379df96482aaa4e1adfc29eeedb
msgid "Returns a dict to use as a filter for ordering operations containing the original ``Meta.order_with_respect_to`` value if provided. If the field is a Generic Relation, the dict returned contains names and values for looking up the relation's ``ct_field`` and ``fk_field`` attributes."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.OrderableBase:1
# 3087ed8e3da04c338f8abcfd207e33f8
msgid "Checks for ``order_with_respect_to`` on the model's inner ``Meta`` class and if found, copies it to a custom attribute and deletes it since it will cause errors when used with ``ForeignKey(\"self\")``. Also creates the ``ordering`` attribute on the ``Meta`` class if not yet provided."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Ownable:1
# 87891edfd14949d1818dfdec95cefac8
msgid "Abstract model that provides ownership of an object for a user."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Ownable.is_editable:1
# 1275daf0575a4542b70d1e2e5642debd
msgid "Restrict in-line editing to the objects's owner and superusers."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.RichText:1
# 7308aef17a8746b8bc829f35aa312493
msgid "Provides a Rich Text field for managing general content and making it searchable."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.SitePermission:1
# 8da97032711f4a6f9ee917833da9f076
msgid "Permission relationship between a user and a site that's used instead of ``User.is_staff``, for admin and inline-editing access."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.SiteRelated:1
# 3177cec377dc4f4ea5a995e14f6e5cc5
msgid "Abstract model for all things site-related. Adds a foreignkey to Django's ``Site`` model, and filters by site with all querysets. See ``mezzanine.utils.sites.current_site_id`` for implementation details."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.SiteRelated.save:1
# db484af6bfc544ec9b5697d97f336297
msgid "Set the site to the current site when the record is first created, or the ``update_site`` argument is explicitly set to ``True``."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Slugged:1
# 2d75eea8b57044b1ae2184def2b1b9d3
msgid "Abstract model that handles auto-generating slugs. Each slugged object is also affiliated with a specific site object."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Slugged.generate_unique_slug:1
# 969ba794d23e4b6caf90f03669003d93
msgid "Create a unique slug by passing the result of get_slug() to utils.urls.unique_slug, which appends an index if necessary."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Slugged.get_slug:1
# f39d32d40fa347528a49cca4c496d7be
msgid "Allows subclasses to implement their own slug creation logic."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.Slugged.save:1
# bf22e17d81ad48219d98ecc5ca7a04f0
msgid "If no slug is provided, generates one before saving."
msgstr ""

#: ../../mezzanine/core/models.py:docstring of mezzanine.core.models.TimeStamped:1
# 5ef6fe956eb842dd9731ee262ad93330
msgid "Provides created and updated timestamps on models."
msgstr ""

#: ../packages.rst:31
# 2228a5f7d2c94a3e8c92478b86fe4557
msgid "``mezzanine.core.managers``"
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.CurrentSiteManager:1
# e3c3acc91fcf4f378ba38f3e9741b7ea
msgid "Extends Django's site manager to first look up site by ID stored in the request, the session, then domain for the current request (accessible via threadlocals in ``mezzanine.core.request``), the environment variable ``MEZZANINE_SITE_ID`` (which can be used by management commands with the ``--site`` arg, finally falling back to ``settings.SITE_ID`` if none of those match a site."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.DisplayableManager:1
# 52d0b74522af42229e85d984b9c90a80
msgid "Manually combines ``CurrentSiteManager``, ``PublishedManager`` and ``SearchableManager`` for the ``Displayable`` model."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.DisplayableManager.url_map:1
# e1b79387f2114b11bacdbcf5cd53ccb4
msgid "Returns a dictionary of urls mapped to Displayable subclass instances, including a fake homepage instance if none exists. Used in ``mezzanine.core.sitemaps``."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.PublishedManager:1
# 919c2db2ef4f44e18ae9a116efd6005d
msgid "Provides filter for restricting items returned by status and publish date when the given user is not a staff member."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.PublishedManager.published:1
# fbb49f8996c648bbb296a96286aa5c33
msgid "For non-staff users, return items with a published status and whose publish and expiry dates fall before and after the current date when specified."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.SearchableManager:1
# 7a2bfa7cd77e4025a954de6adf7d5683
msgid "Manager providing a chainable queryset. Adapted from http://www.djangosnippets.org/snippets/562/ search method supports spanning across models that subclass the model being used to search."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.SearchableManager.contribute_to_class:1
# cd0081f56cf2451cab91aefa628d0c25
msgid "Django 1.5 explicitly prevents managers being accessed from abstract classes, which is behaviour the search API has relied on for years. Here we reinstate it."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.SearchableManager.get_search_fields:1
# 13606bf19d3c48cf80732c343a412a97
msgid "Returns the search field names mapped to weights as a dict. Used in ``get_query_set`` below to tell ``SearchableQuerySet`` which search fields to use. Also used by ``DisplayableAdmin`` to populate Django admin's ``search_fields`` attribute."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.SearchableManager.get_search_fields:6
# 8bc63e6242fd4dfc9a92da409c1f9c04
msgid "Search fields can be populated via ``SearchableManager.__init__``, which then get stored in ``SearchableManager._search_fields``, which serves as an approach for defining an explicit set of fields to be used."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.SearchableManager.get_search_fields:11
# d473311f87e644a7b26c443cb8fafc74
msgid "Alternatively and more commonly, ``search_fields`` can be defined on models themselves. In this case, we look at the model and all its base classes, and build up the search fields from all of those, so the search fields are implicitly built up from the inheritence chain."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.SearchableManager.get_search_fields:17
# 29b91fd65d794bdd988dce90f05ea15d
msgid "Finally if no search fields have been defined at all, we fall back to any fields that are ``CharField`` or ``TextField`` instances."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.SearchableManager.search:1
# 39f291e5c2074b0ab395e7dfb38fb1a6
msgid "Proxy to queryset's search method for the manager's model and any models that subclass from this manager's model if the model is abstract."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.SearchableQuerySet:1
# 74fd6cb269b8497a84a3b471f96f6788
msgid "QuerySet providing main search functionality for ``SearchableManager``."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.SearchableQuerySet.iterator:1
# de0e67eada28490ba9d3eddb1acd8a7a
msgid "If search has occurred and no ordering has occurred, decorate each result with the number of search terms so that it can be sorted by the number of occurrence of terms."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.SearchableQuerySet.iterator:5
# 8d5a1501e80642a5a47af7182bf8b0f1
msgid "In the case of search fields that span model relationships, we cannot accurately match occurrences without some very complicated traversal code, which we won't attempt. So in this case, namely when there are no matches for a result (count=0), and search fields contain relationships (double underscores), we assume one match for one of the fields, and use the average weight of all search fields with relationships."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.SearchableQuerySet.order_by:1
# d928d28563014aee8a1e0781a11399f9
msgid "Mark the filter as being ordered if search has occurred."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.SearchableQuerySet.search:1
# 37cda7d46f2d4f178240c525f44ca5e2
msgid "Build a queryset matching words in the given search query, treating quoted terms as exact phrases and taking into account + and - symbols as modifiers controlling which terms to require and exclude."
msgstr ""

#: ../../mezzanine/core/managers.py:docstring of mezzanine.core.managers.search_fields_to_dict:1
# 712ea733900e4fd295044e7f05400907
msgid "In ``SearchableQuerySet`` and ``SearchableManager``, search fields can either be a sequence, or a dict of fields mapped to weights. This function converts sequences to a dict mapped to even weights, so that we're consistently dealing with a dict of fields mapped to weights, eg: (\"title\", \"content\") -> {\"title\": 1, \"content\": 1}"
msgstr ""

#: ../packages.rst:37
# 8e4f9475177b4c3f8e421bf848a371f9
msgid "``mezzanine.core.views``"
msgstr ""

#: ../../mezzanine/core/views.py:docstring of mezzanine.core.views.direct_to_template:1
# e5421745e663413aa1fec6a76efbbbda
msgid "Replacement for Django's ``direct_to_template`` that uses ``TemplateResponse`` via ``mezzanine.utils.views.render``."
msgstr ""

#: ../../mezzanine/core/views.py:docstring of mezzanine.core.views.displayable_links_js:1
# 2a8d62a4ebe2470aa3d0fda33d6b6fdb
msgid "Renders a list of url/title pairs for all ``Displayable`` subclass instances into JavaScript that's used to populate a list of links in TinyMCE."
msgstr ""

#: ../../mezzanine/core/views.py:docstring of mezzanine.core.views.edit:1
# a184d1d873b049749f1c32ce22c3a9d7
msgid "Process the inline editing form."
msgstr ""

#: ../../mezzanine/core/views.py:docstring of mezzanine.core.views.page_not_found:1
# a75c790ceda14cb4810fde36718d53f3
msgid "Mimics Django's 404 handler but with a different template path."
msgstr ""

#: ../../mezzanine/core/views.py:docstring of mezzanine.core.views.search:1
# bdd336851758413ebfbc116a742fc70c
msgid "Display search results. Takes an optional \"contenttype\" GET parameter in the form \"app-name.ModelName\" to limit search results to a single model."
msgstr ""

#: ../../mezzanine/core/views.py:docstring of mezzanine.core.views.server_error:1
# e619b4705339498f9eee0b788b05fd09
msgid "Mimics Django's error handler but adds ``STATIC_URL`` to the context."
msgstr ""

#: ../../mezzanine/core/views.py:docstring of mezzanine.core.views.set_device:1
# f55c0c8ac5d142e2829c8c77ed951ec9
msgid "Sets a device name in a cookie when a user explicitly wants to go to the site for a particular device (eg mobile)."
msgstr ""

#: ../../mezzanine/core/views.py:docstring of mezzanine.core.views.set_site:1
# d6dc05ae57aa4e929cb89c5b4423594e
msgid "Put the selected site ID into the session - posted to from the \"Select site\" drop-down in the header of the admin. The site ID is then used in favour of the current request's domain in ``mezzanine.core.managers.CurrentSiteManager``."
msgstr ""

#: ../../mezzanine/core/views.py:docstring of mezzanine.core.views.static_proxy:1
# 750c258fd1204b0199b66698d25532ab
msgid "Serves TinyMCE plugins inside the inline popups and the uploadify SWF, as these are normally static files, and will break with cross-domain JavaScript errors if ``STATIC_URL`` is an external host. URL for the file is passed in via querystring in the inline popup plugin template, and we then attempt to pull out the relative path to the file, so that we can serve it locally via Django."
msgstr ""

#: ../packages.rst:43
# 60678ca902a94ac2b838cbb42a23bbb9
msgid "``mezzanine.core.forms``"
msgstr ""

#: ../../mezzanine/core/forms.py:docstring of mezzanine.core.forms.CheckboxSelectMultiple:1
# d6da72a2d2824801939f88d8499eed2e
msgid "Wraps render with a CSS class for styling."
msgstr ""

#: ../../mezzanine/core/forms.py:docstring of mezzanine.core.forms.DynamicInlineAdminForm:1
# 82891d5bcd6e4d639b70c47e269a8ae8
msgid "Form for ``DynamicInlineAdmin`` that can be collapsed and sorted with drag and drop using ``OrderWidget``."
msgstr ""

#: ../../mezzanine/core/forms.py:docstring of mezzanine.core.forms.Html5Mixin:1
# 43585b01a8e142a6a72284f704a32546
msgid "Mixin for form classes. Adds HTML5 features to forms for client side validation by the browser, like a \"required\" attribute and \"email\" and \"url\" input types."
msgstr ""

#: ../../mezzanine/core/forms.py:docstring of mezzanine.core.forms.OrderWidget:1
# 0b13ff090f964c24b9ce8553bc26070c
msgid "Add up and down arrows for ordering controls next to a hidden form field."
msgstr ""

#: ../../mezzanine/core/forms.py:docstring of mezzanine.core.forms.SplitSelectDateTimeWidget:1
# 2cf82a8b88b84342b8bcf86a8388c29a
msgid "Combines Django's ``SelectDateTimeWidget`` and ``SelectDateWidget``."
msgstr ""

#: ../../mezzanine/core/forms.py:docstring of mezzanine.core.forms.TinyMceWidget:1
# 568a7627dd454473a43cdc8abc57c6f3
msgid "Setup the JS files and targetting CSS class for a textarea to use TinyMCE."
msgstr ""

#: ../../mezzanine/core/forms.py:docstring of mezzanine.core.forms.get_edit_form:1
# 78eb2f63eb114896b7fa7040c01ed8c2
msgid "Returns the in-line editing form for editing a single model field."
msgstr ""

#: ../packages.rst:49
# e95f0c06af6c4b9881c2e4544ff4e163
msgid "``mezzanine.core.admin``"
msgstr ""

#: ../../mezzanine/core/admin.py:docstring of mezzanine.core.admin.BaseDynamicInlineAdmin:1
# 81c623cd823447869630ac8ef7a2fd0a
msgid "Admin inline that uses JS to inject an \"Add another\" link which when clicked, dynamically reveals another fieldset. Also handles adding the ``_order`` field and its widget for models that subclass ``Orderable``."
msgstr ""

#: ../../mezzanine/core/admin.py:docstring of mezzanine.core.admin.DisplayableAdmin:1
# 8b8e0ac809c142769905aa40a8265fb3
msgid "Admin class for subclasses of the abstract ``Displayable`` model."
msgstr ""

#: ../../mezzanine/core/admin.py:docstring of mezzanine.core.admin.OwnableAdmin:1
# 82d80ad358a848889f197a6a0dd7467c
msgid "Admin class for models that subclass the abstract ``Ownable`` model. Handles limiting the change list to objects owned by the logged in user, as well as setting the owner of newly created objects to the logged in user."
msgstr ""

#: ../../mezzanine/core/admin.py:docstring of mezzanine.core.admin.OwnableAdmin:6
# 85759e081e6b4a8ca3ad12020ab4d7de
msgid "Remember that this will include the ``user`` field in the required fields for the admin change form which may not be desirable. The best approach to solve this is to define a ``fieldsets`` attribute that excludes the ``user`` field or simple add ``user`` to your admin excludes: ``exclude = ('user',)``"
msgstr ""

#: ../../mezzanine/core/admin.py:docstring of mezzanine.core.admin.OwnableAdmin.get_queryset:1
# 4d953fb3818c4df99e09f4b9a2d90b1e
msgid "Filter the change list by currently logged in user if not a superuser. We also skip filtering if the model for this admin class has been added to the sequence in the setting ``OWNABLE_MODELS_ALL_EDITABLE``, which contains models in the format ``app_label.object_name``, and allows models subclassing ``Ownable`` to be excluded from filtering, eg: ownership should not imply permission to edit."
msgstr ""

#: ../../mezzanine/core/admin.py:docstring of mezzanine.core.admin.OwnableAdmin.save_form:1
# f2df41fcc98e48798d6299dbcf2c3704
msgid "Set the object's owner as the logged in user."
msgstr ""

#: ../../mezzanine/core/admin.py:docstring of mezzanine.core.admin.SingletonAdmin:1
# 62df82b9b5664c2c96fa45816962ff10
msgid "Admin class for models that should only contain a single instance in the database. Redirect all views to the change view when the instance exists, and to the add view when it doesn't."
msgstr ""

#: ../../mezzanine/core/admin.py:docstring of mezzanine.core.admin.SingletonAdmin.add_view:1
# 2e322fca9ac44f879626be464c20cb17
msgid "Redirect to the change view if the singleton instance exists."
msgstr ""

#: ../../mezzanine/core/admin.py:docstring of mezzanine.core.admin.SingletonAdmin.change_view:1
# 7fb1ac527cea404385fc6a1c2209f5f8
msgid "If only the singleton instance exists, pass ``True`` for ``singleton`` into the template which will use CSS to hide the \"save and add another\" button."
msgstr ""

#: ../../mezzanine/core/admin.py:docstring of mezzanine.core.admin.SingletonAdmin.changelist_view:1
# 74d53b5eeeaf4df592f45d3d63fe9759
msgid "Redirect to the add view if no records exist or the change view if the singleton instance exists."
msgstr ""

#: ../../mezzanine/core/admin.py:docstring of mezzanine.core.admin.SingletonAdmin.handle_save:1
# 1acb97e4eaff41049aa24012c9d17229
msgid "Handles redirect back to the dashboard when save is clicked (eg not save and continue editing), by checking for a redirect response, which only occurs if the form is valid."
msgstr ""

#: ../packages.rst:55
# b943bc4da7c34124b70d0b9de304a334
msgid "``mezzanine.core.middleware``"
msgstr ""

#: ../../mezzanine/core/middleware.py:docstring of mezzanine.core.middleware.AdminLoginInterfaceSelectorMiddleware:1
# 3464e5493d5a4cc9880d8330a9dd6c13
msgid "Checks for a POST from the admin login view and if authentication is successful and the \"site\" interface is selected, redirect to the site."
msgstr ""

#: ../../mezzanine/core/middleware.py:docstring of mezzanine.core.middleware.FetchFromCacheMiddleware:1
# bf189ed7975c44c0b34b2ef67d353c57
msgid "Request phase for Mezzanine cache middleware. Return a response from cache if found, othwerwise mark the request for updating the cache in ``UpdateCacheMiddleware``."
msgstr ""

#: ../../mezzanine/core/middleware.py:docstring of mezzanine.core.middleware.RedirectFallbackMiddleware:1
# aad3cbc6ab1343b0bcf5642e62ef3297
msgid "Port of Django's ``RedirectFallbackMiddleware`` that uses Mezzanine's approach for determining the current site."
msgstr ""

#: ../../mezzanine/core/middleware.py:docstring of mezzanine.core.middleware.SSLRedirectMiddleware:1
# b0b7da9ce6344e49ae600cdd53afa240
msgid "Handles redirections required for SSL when ``SSL_ENABLED`` is ``True``."
msgstr ""

#: ../../mezzanine/core/middleware.py:docstring of mezzanine.core.middleware.SSLRedirectMiddleware:3
# 8543be255f264591b7692e68cbcc3875
msgid "If ``SSL_FORCE_HOST`` is ``True``, and is not the current host, redirect to it."
msgstr ""

#: ../../mezzanine/core/middleware.py:docstring of mezzanine.core.middleware.SSLRedirectMiddleware:6
# fff6f4224f9446278a6e693a44d4d5e7
msgid "Also ensure URLs defined by ``SSL_FORCE_URL_PREFIXES`` are redirect to HTTPS, and redirect all other URLs to HTTP if on HTTPS."
msgstr ""

#: ../../mezzanine/core/middleware.py:docstring of mezzanine.core.middleware.SitePermissionMiddleware:1
# 33b8b9fad6fc48768acceddd487ba444
msgid "Marks the current user with a ``has_site_permission`` which is used in place of ``user.is_staff`` to achieve per-site staff access."
msgstr ""

#: ../../mezzanine/core/middleware.py:docstring of mezzanine.core.middleware.TemplateForDeviceMiddleware:1
# e85119ea766d48cca09ccc9b0e4372b1
msgid "Inserts device-specific templates to the template list."
msgstr ""

#: ../../mezzanine/core/middleware.py:docstring of mezzanine.core.middleware.TemplateForHostMiddleware:1
# 2b623550b91e406f8de16dfe3d437f58
msgid "Inserts host-specific templates to the template list."
msgstr ""

#: ../../mezzanine/core/middleware.py:docstring of mezzanine.core.middleware.UpdateCacheMiddleware:1
# 7350c2367f084645b9e779333d1eb7c6
msgid "Response phase for Mezzanine's cache middleware. Handles caching the response, and then performing the second phase of rendering, for content enclosed by the ``nevercache`` tag."
msgstr ""

#: ../packages.rst:61
# f79a299f0f3e421da64e374696a640f4
msgid "``mezzanine.core.templatetags.mezzanine_tags``"
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.admin_app_list:1
# 6d66bf3edb2a41138598d60a5ab1e1d5
msgid "Adopted from ``django.contrib.admin.sites.AdminSite.index``. Returns a list of lists of models grouped and ordered according to ``mezzanine.conf.ADMIN_MENU_ORDER``. Called from the ``admin_dropdown_menu`` template tag as well as the ``app_list`` dashboard widget."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.admin_dropdown_menu:1
# b2941a0719b44f57817a484cb70187ee
msgid "Renders the app list for the admin dropdown menu navigation."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.app_list:1
# 8ab5b24059754394b5611c84f87c4126
msgid "Renders the app list for the admin dashboard widget."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.compress:1
# c71cf9ba467f4d4da930de8c65e39d35
msgid "Dummy tag for fallback when django-compressor isn't installed."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.dashboard_column:1
# 946f21cc8b01412b940442c5ee7abca5
msgid "Takes an index for retrieving the sequence of template tags from ``mezzanine.conf.DASHBOARD_TAGS`` to render into the admin dashboard."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.editable:1
# 6fbd8cd5c60e410a805700c75b186ec9
msgid "Add the required HTML to the parsed content for in-line editing, such as the icon and edit form if the object is deemed to be editable - either it has an ``editable`` method which returns ``True``, or the logged in user has change permissions for the model."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.editable_loader:1
# 8666167ebb51473c84c97f314bdb821c
msgid "Set up the required JS/CSS for the in-line editing toolbar and controls."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.errors_for:1
# 5d137e0e7fa542228f33629819f44d28
msgid "Renders an alert if the form has any errors."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.fields_for:1
# 0380c9dcd76d462aa84cb815d9f89e56
msgid "Renders fields for a form."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.gravatar_url:1
# 5186085407a14fb7a643f4544a846e29
msgid "Return the full URL for a Gravatar given an email hash."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.ifinstalled:1
# 51c3ab6352b14d638337133193f3440e
msgid "Old-style ``if`` tag that renders contents if the given app is installed. The main use case is:"
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.ifinstalled:4
# 15dc690fb26944d788c7802e92e72d53
msgid "{% ifinstalled app_name %} {% include \"app_name/template.html\" %} {% endifinstalled %}"
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.ifinstalled:8
# fd2ec130cbfc4b059626d2b18d207aa4
msgid "so we need to manually pull out all tokens if the app isn't installed, since if we used a normal ``if`` tag with a False arg, the include tag will still try and find the template to include."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.is_installed:1
# 1a0db9bd58c244b1a7af6608a520b799
msgid "Returns ``True`` if the given app name is in the ``INSTALLED_APPS`` setting."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.metablock:1
# 37f47c4e263a4adea3dd542d2d897024
msgid "Remove HTML tags, entities and superfluous characters from meta blocks."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.nevercache:1
# a56c5f722e924a31b6ff9fe381751088
msgid "Dummy fallback ``nevercache`` for when caching is not configured."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.pagination_for:1
# 8dcd4cf9f61944999abf4f393f89538b
msgid "Include the pagination template and data for persisting querystring in pagination links. Can also contain a comma separated string of var names in the current querystring to exclude from the pagination links, via the ``exclude_vars`` arg."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.recent_actions:1
# dcf9f1a4219a4e0cb3bb51a561d5d874
msgid "Renders the recent actions list for the admin dashboard widget."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.richtext_filter:1
# 3cc921e192804898afe7743140c41c5d
msgid "Deprecated version of richtext_filters above."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.richtext_filters:1
# 63498d428826409fb82d1549ccc4afc7
msgid "Takes a value edited via the WYSIWYG editor, and passes it through each of the functions specified by the RICHTEXT_FILTERS setting."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.search_form:1
# c9e66f6bf7824cb0becbfa64ebfea5d3
msgid "Includes the search form with a list of models to use as choices for filtering the search by. Models should be a string with models in the format ``app_label.model_name`` separated by spaces. The string ``all`` can also be used, in which case the models defined by the ``SEARCH_MODEL_CHOICES`` setting will be used."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.set_short_url_for:1
# c5b2cac36e3b48519353c6b167dce143
msgid "Sets the ``short_url`` attribute of the given model for share links in the template."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.sort_by:1
# bd4063ccede54a5f9dcce18dadef6c3e
msgid "General sort filter - sorts by either attribute or key."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.thumbnail:1
# 09409bbdda174124823cb0d9ad9885e2
msgid "Given the URL to an image, resizes the image using the given width and height on the first time it is requested, and returns the URL to the new resized image. if width or height are zero then original ratio is maintained."
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.translate_url:1
# d35ba4964fb34effbd7cf71f7f593993
msgid "Translates the current URL for the given language code, eg:"
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.translate_url:3
# 9d17cf5aa5704c1f9b1cd45ec836bfa7
msgid "{% translate_url de %}"
msgstr ""

#: ../../mezzanine/core/templatetags/mezzanine_tags.py:docstring of mezzanine.core.templatetags.mezzanine_tags.try_url:1
# de163eb2734f49fdbf88cc005043b362
msgid "Mimics Django's ``url`` template tag but fails silently. Used for url names in admin templates as these won't resolve when admin tests are running."
msgstr ""

#: ../packages.rst:67
# a0ae9b81d8044a35900e89e63c81b485
msgid "``mezzanine.core.management.commands``"
msgstr ""

#: ../packages.rst:73
# 4d7a19a8ed0c4f48bf6df96363ddbccb
msgid "``mezzanine.core.request``"
msgstr ""

#: ../../mezzanine/core/request.py:docstring of mezzanine.core.request.CurrentRequestMiddleware:1
# 38777fcced96480890515bdc15bc14df
msgid "Stores the request in the current thread for global access."
msgstr ""

#: ../../mezzanine/core/request.py:docstring of mezzanine.core.request.current_request:1
# 46b42152f9774eec878e1eebcf1e8e56
msgid "Retrieves the request from the current thread."
msgstr ""

#: ../packages.rst:79
# 11f3b5d1d6ff4fbab2af1a3673346fdd
msgid "``mezzanine.core.tests``"
msgstr ""

#: ../packages.rst:88
# 7b66cad27b6545cb85116451ae1a50e6
msgid "``mezzanine.pages``"
msgstr ""

#: ../../mezzanine/pages/__init__.py:docstring of mezzanine.pages:1
# 26dd8904f56f4d78ae28b9db7705e491
msgid "Provides the main structure of a Mezzanine site with a hierarchical tree of pages, each subclassing the Page model to create a content structure."
msgstr ""

#: ../packages.rst:93
# d895790c51c14cde8b180cc7a604eaae
msgid "``mezzanine.pages.models``"
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.BasePage:1
# 02e61d89c84c444296a8c49bd8596a91
msgid "Exists solely to store ``PageManager`` as the main manager. If it's defined on ``Page``, a concrete model, then each ``Page`` subclass loses the custom manager."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Link:1
# cfaed90bfbdf40eb81ee4a8757a6415e
msgid "A general content type for creating external links in the page menu."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Link.get_absolute_url:1
#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page.get_absolute_url:1
#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.RichTextPage.get_absolute_url:1
#: ../../mezzanine/forms/models.py:docstring of mezzanine.forms.models.Form.get_absolute_url:1
#: ../../mezzanine/galleries/models.py:docstring of mezzanine.galleries.models.Gallery.get_absolute_url:1
# a36a782e86f543c09a45442167f784a1
# 5ed5b40d18fc437380bd18ba70598c2b
# cdc56bed1ae54d91a61843bf3f64f5db
# 38e52b5c36a9424887a3f4b9fef00ef9
# a245aa90acf44652accc9054e01299e3
msgid "URL for a page - for ``Link`` page types, simply return its slug since these don't have an actual URL pattern. Also handle the special case of the homepage being a page object."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page:1
# 13a1b92fdf934a0eaf0ca4ceebf8a929
msgid "A page in the page tree. This is the base class that custom content types need to subclass."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page.can_add:1
# 5837152c13db4cadba03b7f5d3f2f4e8
msgid "Dynamic ``add`` permission for content types to override."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page.can_change:1
# 816115143db149f4a78867a3b0cecd49
msgid "Dynamic ``change`` permission for content types to override."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page.can_delete:1
# ea679acebbeb4a4c9c9879912cc0a5fa
msgid "Dynamic ``delete`` permission for content types to override."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page.can_move:1
# 3d51ec7ace34488eba8279ab7bb8ef0d
msgid "Dynamic ``move`` permission for content types to override. Controls whether a given page move in the page tree is permitted. When the permission is denied, raises a ``PageMoveException`` with a single argument (message explaining the reason)."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page.description_from_content:1
# 9146e544aa784e4490161189a4eb749c
msgid "Override ``Displayable.description_from_content`` to load the content type subclass for when ``save`` is called directly on a ``Page`` instance, so that all fields defined on the subclass are available for generating the description."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page.get_ascendants:1
# 7c7d171808224e1bba7b4e7939ba0cd2
msgid "Returns the ascendants for the page. Ascendants are cached in the ``_ascendants`` attribute, which is populated when the page is loaded via ``Page.objects.with_ascendants_for_slug``."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page.get_content_model:1
# 2f78e4e4f1e34ef2a63e8b98c2f0866d
msgid "Provies a generic method of retrieving the instance of the custom content type's model for this page."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page.get_content_models:1
# c7ee9b0e914a489a9f97515b6289fd87
msgid "Return all Page subclasses."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page.get_slug:1
# c021121a08104d719c10cf088d54745a
msgid "Recursively build the slug from the chain of parents."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page.get_template_name:1
# 882cd3f5b46c42e88be281d51dfe767b
msgid "Subclasses can implement this to provide a template to use in ``mezzanine.pages.views.page``."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page.overridden:1
# 2e608680340e4d7cb694485b25974857
msgid "Returns ``True`` if the page's slug has an explicitly defined urlpattern and is therefore considered to be overridden."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page.save:1
# c5b501777c214035b5a512a205a72442
msgid "Create the titles field using the titles up the parent chain and set the initial value for ordering."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page.set_helpers:1
# 245684aa15d743dcbc26fd77228fe546
msgid "Called from the ``page_menu`` template tag and assigns a handful of properties based on the current page, that are used within the various types of menus."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page.set_parent:1
# 45ee92f20c44449daffac2ab89051ada
msgid "Change the parent of this page, changing this page's slug to match the new parent if necessary."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.Page.set_slug:1
# 27ef2bb0c41441cba030aed286d29b7e
msgid "Changes this page's slug, and all other pages whose slugs start with this page's slug."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.PageMoveException:1
# 8c80879b23c34e099716fb8c3a44b08a
msgid "Raised by ``can_move()`` when the move permission is denied. Takes an optinal single argument: a message explaining the denial."
msgstr ""

#: ../../mezzanine/pages/models.py:docstring of mezzanine.pages.models.RichTextPage:1
# 566734a5068f4a0db02413051eddfa05
msgid "Implements the default type of page with a single Rich Text content field."
msgstr ""

#: ../packages.rst:99
# c439cb540b014ff89b76d719dc211759
msgid "``mezzanine.pages.views``"
msgstr ""

#: ../../mezzanine/pages/views.py:docstring of mezzanine.pages.views.admin_page_ordering:1
# 805492a69fe74d2c81481429a76ceb94
msgid "Updates the ordering of pages via AJAX from within the admin."
msgstr ""

#: ../../mezzanine/pages/views.py:docstring of mezzanine.pages.views.page:1
# e62084809070410881df5fe7187d385a
msgid "Select a template for a page and render it. The request object should have a ``page`` attribute that's added via ``mezzanine.pages.middleware.PageMiddleware``. The page is loaded earlier via middleware to perform various other functions. The urlpattern that maps to this view is a catch-all pattern, in which case the page attribute won't exist, so raise a 404 then."
msgstr ""

#: ../../mezzanine/pages/views.py:docstring of mezzanine.pages.views.page:8
# c0d3158b61cc46309f60a39013846cb6
msgid "For template selection, a list of possible templates is built up based on the current page. This list is order from most granular match, starting with a custom template for the exact page, then adding templates based on the page's parent page, that could be used for sections of a site (eg all children of the parent). Finally at the broadest level, a template for the page's content type (it's model class) is checked for, and then if none of these templates match, the default pages/page.html is used."
msgstr ""

#: ../packages.rst:105
# ae1e1888859041b1be5b28b40044a4eb
msgid "``mezzanine.pages.admin``"
msgstr ""

#: ../../mezzanine/pages/admin.py:docstring of mezzanine.pages.admin.PageAdmin:1
# d6f77a80367e4ad186821f08c3d5407d
msgid "Admin class for the ``Page`` model and all subclasses of ``Page``. Handles redirections between admin interfaces for the ``Page`` model and its subclasses."
msgstr ""

#: ../../mezzanine/pages/admin.py:docstring of mezzanine.pages.admin.PageAdmin.add_view:1
# 51fbc182d49441489800ef1e7e7aec8a
msgid "For the ``Page`` model, redirect to the add view for the first page model, based on the ``ADD_PAGE_ORDER`` setting."
msgstr ""

#: ../../mezzanine/pages/admin.py:docstring of mezzanine.pages.admin.PageAdmin.change_view:1
# 3ea7ff1d378341628b9b9eb18b32a45f
msgid "For the ``Page`` model, check ``page.get_content_model()`` for a subclass and redirect to its admin change view. Also enforce custom change permissions for the page instance."
msgstr ""

#: ../../mezzanine/pages/admin.py:docstring of mezzanine.pages.admin.PageAdmin.changelist_view:1
# 3cf14a9a1e134844a0759c78adef0dcc
msgid "Redirect to the ``Page`` changelist view for ``Page`` subclasses."
msgstr ""

#: ../../mezzanine/pages/admin.py:docstring of mezzanine.pages.admin.PageAdmin.delete_view:1
# af81a9b9befa4ab6a0a1f436f1d5f759
msgid "Enforce custom delete permissions for the page instance."
msgstr ""

#: ../../mezzanine/pages/admin.py:docstring of mezzanine.pages.admin.PageAdmin.get_content_models:1
# 5995d52db46641188c59c30bd7644740
msgid "Return all Page subclasses that are admin registered, ordered based on the ``ADD_PAGE_ORDER`` setting."
msgstr ""

#: ../../mezzanine/pages/admin.py:docstring of mezzanine.pages.admin.PageAdmin.in_menu:1
# a930a7e017e14bff8d5400c774231727
msgid "Hide subclasses from the admin menu."
msgstr ""

#: ../../mezzanine/pages/admin.py:docstring of mezzanine.pages.admin.PageAdmin.response_add:1
#: ../../mezzanine/pages/admin.py:docstring of mezzanine.pages.admin.PageAdmin.response_change:1
# 73cf6cee186c4fcab0767e66434f7f8e
# aaee3019e8054ccc988d8c2a01ddeb22
msgid "Enforce page permissions and maintain the parent ID in the querystring."
msgstr ""

#: ../../mezzanine/pages/admin.py:docstring of mezzanine.pages.admin.PageAdmin.save_model:1
# 20187948ed3340d4be053d3755396aea
msgid "Set the ID of the parent page if passed in via querystring, and make sure the new slug propagates to all descendant pages."
msgstr ""

#: ../packages.rst:111
# 44ff4aae2d6a4ac8bd0025d5cf38ae79
msgid "``mezzanine.pages.middleware``"
msgstr ""

#: ../../mezzanine/pages/middleware.py:docstring of mezzanine.pages.middleware.PageMiddleware:1
# b1f181f93abe47d0b04866cc6c8f3375
msgid "Adds a page to the template context for the current response."
msgstr ""

#: ../../mezzanine/pages/middleware.py:docstring of mezzanine.pages.middleware.PageMiddleware:3
# 12b1ffe1543241adb459ac842b20a39c
msgid "If no page matches the URL, and the view function is not the fall-back page view, we try and find the page with the deepest URL that matches within the current URL, as in this situation, the app's urlpattern is considered to sit \"under\" a given page, for example the blog page will be used when individual blog posts are viewed. We want the page for things like breadcrumb nav, and page processors, but most importantly so the page's ``login_required`` flag can be honoured."
msgstr ""

#: ../../mezzanine/pages/middleware.py:docstring of mezzanine.pages.middleware.PageMiddleware:12
# 8fba42d1e522411586c29f9192caebef
msgid "If a page is matched, and the fall-back page view is called, we add the page to the ``extra_context`` arg of the page view, which it can then use to choose which template to use."
msgstr ""

#: ../../mezzanine/pages/middleware.py:docstring of mezzanine.pages.middleware.PageMiddleware:16
# 75c79cbadadd4b90a727fcd005c7c7e2
msgid "In either case, we add the page to the response's template context, so that the current page is always available."
msgstr ""

#: ../../mezzanine/pages/middleware.py:docstring of mezzanine.pages.middleware.PageMiddleware.installed:1
# 4646cd10dc0b40d0b337f5e0b5584be5
msgid "Used in ``mezzanine.pages.views.page`` to ensure ``PageMiddleware`` or a subclass has been installed. We cache the result on the ``PageMiddleware._installed`` to only run this once. Short path is to just check for the dotted path to ``PageMiddleware`` in ``MIDDLEWARE_CLASSES`` - if not found, we need to load each middleware class to match a subclass."
msgstr ""

#: ../../mezzanine/pages/middleware.py:docstring of mezzanine.pages.middleware.PageMiddleware.process_view:1
# dcd85d803a3a482e894dc51febb408f2
msgid "Per-request mechanics for the current page object."
msgstr ""

#: ../packages.rst:117
# 5a317a851de14a76b2f633dee65d8580
msgid "``mezzanine.pages.templatetags.pages_tags``"
msgstr ""

#: ../../mezzanine/pages/templatetags/pages_tags.py:docstring of mezzanine.pages.templatetags.pages_tags.models_for_pages:1
# 14feb021662e45d18b188b7799b3d5a5
msgid "Create a select list containing each of the models that subclass the ``Page`` model."
msgstr ""

#: ../../mezzanine/pages/templatetags/pages_tags.py:docstring of mezzanine.pages.templatetags.pages_tags.page_menu:1
# 302e37710e634eb49654ab5b2dad7cf3
msgid "Return a list of child pages for the given parent, storing all pages in a dict in the context when first called using parents as keys for retrieval on subsequent recursive calls from the menu template."
msgstr ""

#: ../../mezzanine/pages/templatetags/pages_tags.py:docstring of mezzanine.pages.templatetags.pages_tags.set_model_permissions:1
# 7b71b7a50d6642698b035cfe261a5a2a
msgid "Assigns a permissions dict to the given model, much like Django does with its dashboard app list."
msgstr ""

#: ../../mezzanine/pages/templatetags/pages_tags.py:docstring of mezzanine.pages.templatetags.pages_tags.set_model_permissions:4
#: ../../mezzanine/pages/templatetags/pages_tags.py:docstring of mezzanine.pages.templatetags.pages_tags.set_page_permissions:6
# 71a3ffa1eeff460d900e20a0aa8f059b
# c566b08b24614636a5453b25007cb671
msgid "Used within the change list for pages, to implement permission checks for the navigation tree."
msgstr ""

#: ../../mezzanine/pages/templatetags/pages_tags.py:docstring of mezzanine.pages.templatetags.pages_tags.set_page_permissions:1
# 86c7b4bd744143fba9e3131fcdae2314
msgid "Assigns a permissions dict to the given page instance, combining Django's permission for the page's model and a permission check against the instance itself calling the page's ``can_add``, ``can_change`` and ``can_delete`` custom methods."
msgstr ""

#: ../packages.rst:123
# 2695d6aab4fb46d095f3cb016e15a839
msgid "``mezzanine.pages.page_processors``"
msgstr ""

#: ../../mezzanine/pages/page_processors.py:docstring of mezzanine.pages.page_processors.autodiscover:1
# ce29e4c48d504637ad0de979556287e6
msgid "Taken from ``django.contrib.admin.autodiscover`` and used to run any calls to the ``processor_for`` decorator."
msgstr ""

#: ../../mezzanine/pages/page_processors.py:docstring of mezzanine.pages.page_processors.processor_for:1
# 2e612529484a49fbaca7e94a75c32376
msgid "Decorator that registers the decorated function as a page processor for the given content model or slug."
msgstr ""

#: ../../mezzanine/pages/page_processors.py:docstring of mezzanine.pages.page_processors.processor_for:4
# bdaa29fbb90b4fdd98704bfbd89b0897
msgid "When a page exists that forms the prefix of custom urlpatterns in a project (eg: the blog page and app), the page will be added to the template context. Passing in ``True`` for the ``exact_page`` arg, will ensure that the page processor is not run in this situation, requiring that the loaded page object is for the exact URL currently being viewed."
msgstr ""

#: ../packages.rst:132
# dc5e7a2ae431413b8725f4237f9267f4
msgid "``mezzanine.generic``"
msgstr ""

#: ../../mezzanine/generic/__init__.py:docstring of mezzanine.generic:1
# bfc7e6c9e7ed45d7b2aecc2cc20fb00f
msgid "Provides various models and associated functionality, that can be related to any other model using generic relationshipswith Django's contenttypes framework, such as comments, keywords/tags and voting."
msgstr ""

#: ../packages.rst:137
# 962f2ed99d644d658ce37e81edeaa744
msgid "``mezzanine.generic.models``"
msgstr ""

#: ../../mezzanine/generic/models.py:docstring of mezzanine.generic.models.AssignedKeyword:1
# aca74d2c8b7e4335b13f34b0ac7f6f3a
msgid "A ``Keyword`` assigned to a model instance."
msgstr ""

#: ../../mezzanine/generic/models.py:docstring of mezzanine.generic.models.Keyword:1
# 869671662a26466c8658f70495a4762a
msgid "Keywords/tags which are managed via a custom JavaScript based widget in the admin."
msgstr ""

#: ../../mezzanine/generic/models.py:docstring of mezzanine.generic.models.Rating:1
# 5ad434ecdc38485e9bab94f81892a791
msgid "A rating that can be given to a piece of content."
msgstr ""

#: ../../mezzanine/generic/models.py:docstring of mezzanine.generic.models.Rating.save:1
# 66388522ea134d2ebc4085a4135ff7b6
msgid "Validate that the rating falls between the min and max values."
msgstr ""

#: ../../mezzanine/generic/models.py:docstring of mezzanine.generic.models.ThreadedComment:1
# fa9d837c1d8d43389f8dfe0201d47980
msgid "Extend the ``Comment`` model from ``django.contrib.comments`` to add comment threading. ``Comment`` provides its own site foreign key, so we can't inherit from ``SiteRelated`` in ``mezzanine.core``, and therefore need to set the site on ``save``. ``CommentManager`` inherits from Mezzanine's ``CurrentSiteManager``, so everything else site related is already provided."
msgstr ""

#: ../../mezzanine/generic/models.py:docstring of mezzanine.generic.models.ThreadedComment.get_absolute_url:1
# 6243a1797c4243cbbfba5d863b64fa92
msgid "Use the URL for the comment's content object, with a URL hash appended that references the individual comment."
msgstr ""

#: ../../mezzanine/generic/models.py:docstring of mezzanine.generic.models.ThreadedComment.save:1
# ec1a94b5b04a4280b545827bb81d2bb0
msgid "Set the current site ID, and ``is_public`` based on the setting ``COMMENTS_DEFAULT_APPROVED``."
msgstr ""

#: ../packages.rst:143
# 5a039054af2d4821a8fb54768ef828ce
msgid "``mezzanine.generic.managers``"
msgstr ""

#: ../../mezzanine/generic/managers.py:docstring of mezzanine.generic.managers.CommentManager:1
# 1cecab37de0841079cb5e2af1a0d3807
msgid "Provides filter for restricting comments that are not approved if ``COMMENTS_UNAPPROVED_VISIBLE`` is set to ``False``."
msgstr ""

#: ../../mezzanine/generic/managers.py:docstring of mezzanine.generic.managers.CommentManager.count_queryset:1
# 2343381eb5414a9f806157eb50d6ec3f
msgid "Called from ``CommentsField.related_items_changed`` to store the comment count against an item each time a comment is saved."
msgstr ""

#: ../../mezzanine/generic/managers.py:docstring of mezzanine.generic.managers.CommentManager.visible:1
# d16a604fe63941c0a9824f2dbe2e8935
msgid "Return the comments that are visible based on the ``COMMENTS_XXX_VISIBLE`` settings. When these settings are set to ``True``, the relevant comments are returned that shouldn't be shown, and are given placeholders in the template ``generic/includes/comment.html``."
msgstr ""

#: ../packages.rst:149
# 0752773c326f40ef9b5588b978f07331
msgid "``mezzanine.generic.fields``"
msgstr ""

#: ../../mezzanine/generic/fields.py:docstring of mezzanine.generic.fields.BaseGenericRelation:1
# f1187472b1ba4e69b3def032f97d97de
msgid "Extends ``GenericRelation`` to:"
msgstr ""

#: ../../mezzanine/generic/fields.py:docstring of mezzanine.generic.fields.BaseGenericRelation:3
# 6c98255d62ae4a2f9c01288e497cda17
msgid "Add a consistent default value for ``object_id_field`` and check for a ``related_model`` attribute which can be defined on subclasses as a default for the ``to`` argument."
msgstr ""

#: ../../mezzanine/generic/fields.py:docstring of mezzanine.generic.fields.BaseGenericRelation:7
# a04ab12125ec47aa8d9cbc3b03fa5ed4
msgid "Add one or more custom fields to the model that the relation field is applied to, and then call a ``related_items_changed`` method each time related items are saved or deleted, so that a calculated value can be stored against the custom fields since aggregates aren't available for GenericRelation instances."
msgstr ""

#: ../../mezzanine/generic/fields.py:docstring of mezzanine.generic.fields.BaseGenericRelation.contribute_to_class:1
# f0a0640e71754bd59dd1eadf96684fc3
msgid "Add each of the names and fields in the ``fields`` attribute to the model the relationship field is applied to, and set up the related item save and delete signals for calling ``related_items_changed``."
msgstr ""

#: ../../mezzanine/generic/fields.py:docstring of mezzanine.generic.fields.BaseGenericRelation.related_items_changed:1
# e2a9cca4b6244d24bc524dd981b31f1d
msgid "Can be implemented by subclasses - called whenever the state of related items change, eg they're saved or deleted. The instance for this field and the related manager for the field are passed as arguments."
msgstr ""

#: ../../mezzanine/generic/fields.py:docstring of mezzanine.generic.fields.BaseGenericRelation.value_from_object:1
# 078e282533254c7382bf584952f16891
msgid "Returns the value of this field in the given model instance. Needed for Django 1.7: https://code.djangoproject.com/ticket/22552"
msgstr ""

#: ../../mezzanine/generic/fields.py:docstring of mezzanine.generic.fields.CommentsField:1
# bc567efdd9444759805152ff1a33cb59
msgid "Stores the number of comments against the ``COMMENTS_FIELD_NAME_count`` field when a comment is saved or deleted."
msgstr ""

#: ../../mezzanine/generic/fields.py:docstring of mezzanine.generic.fields.CommentsField.related_items_changed:1
# fa10967e4f6c4d1a9e98505d46ca4084
msgid "Stores the number of comments. A custom ``count_filter`` queryset gets checked for, allowing managers to implement custom count logic."
msgstr ""

#: ../../mezzanine/generic/fields.py:docstring of mezzanine.generic.fields.KeywordsField:1
# 89a42847e8fc47958f041ca617eaec67
msgid "Stores the keywords as a single string into the ``KEYWORDS_FIELD_NAME_string`` field for convenient access when searching."
msgstr ""

#: ../../mezzanine/generic/fields.py:docstring of mezzanine.generic.fields.KeywordsField.contribute_to_class:1
# f99fa9d49ba8411791d044447d652c41
msgid "Swap out any reference to ``KeywordsField`` with the ``KEYWORDS_FIELD_string`` field in ``search_fields``."
msgstr ""

#: ../../mezzanine/generic/fields.py:docstring of mezzanine.generic.fields.KeywordsField.formfield:1
# 5cc56d1ccf5f446697a5938015ba2f88
msgid "Provide the custom form widget for the admin, since there isn't a form field mapped to ``GenericRelation`` model fields."
msgstr ""

#: ../../mezzanine/generic/fields.py:docstring of mezzanine.generic.fields.KeywordsField.related_items_changed:1
# 053b9f0d996e4e52a33351ea5ddfb278
msgid "Stores the keywords as a single string for searching."
msgstr ""

#: ../../mezzanine/generic/fields.py:docstring of mezzanine.generic.fields.KeywordsField.save_form_data:1
# 6be80b7f305f4ab48d579da73810e5c4
msgid "The ``KeywordsWidget`` field will return data as a string of comma separated IDs for the ``Keyword`` model - convert these into actual ``AssignedKeyword`` instances. Also delete ``Keyword`` instances if their last related ``AssignedKeyword`` instance is being removed."
msgstr ""

#: ../../mezzanine/generic/fields.py:docstring of mezzanine.generic.fields.RatingField:1
# b6b7b0ab13974cc6ab99860fe2cafaaa
msgid "Stores the rating count and average against the ``RATING_FIELD_NAME_count`` and ``RATING_FIELD_NAME_average`` fields when a rating is saved or deleted."
msgstr ""

#: ../../mezzanine/generic/fields.py:docstring of mezzanine.generic.fields.RatingField.related_items_changed:1
# f77e340ad4164f088830deb8e26fdd6e
msgid "Calculates and saves the average rating."
msgstr ""

#: ../packages.rst:155
# 26fb7051fe93452bb6d15125fae9b900
msgid "``mezzanine.generic.views``"
msgstr ""

#: ../../mezzanine/generic/views.py:docstring of mezzanine.generic.views.admin_keywords_submit:1
# f80167cff6f84f1491cb33b32397c3fe
msgid "Adds any new given keywords from the custom keywords field in the admin, and returns their IDs for use when saving a model with a keywords field."
msgstr ""

#: ../../mezzanine/generic/views.py:docstring of mezzanine.generic.views.comment:1
# 7a59a38294af42ab9c60043d12e9bb0b
msgid "Handle a ``ThreadedCommentForm`` submission and redirect back to its related object."
msgstr ""

#: ../../mezzanine/generic/views.py:docstring of mezzanine.generic.views.initial_validation:1
# ee78b43c95994818822c26213b742b12
msgid "Returns the related model instance and post data to use in the comment/rating views below."
msgstr ""

#: ../../mezzanine/generic/views.py:docstring of mezzanine.generic.views.initial_validation:4
# 7a36458ca7e749eb92b6e18752bd0601
msgid "Both comments and ratings have a ``prefix_ACCOUNT_REQUIRED`` setting. If this is ``True`` and the user is unauthenticated, we store their post data in their session, and redirect to login with the view's url (also defined by the prefix arg) as the ``next`` param. We can then check the session data once they log in, and complete the action authenticated."
msgstr ""

#: ../../mezzanine/generic/views.py:docstring of mezzanine.generic.views.initial_validation:11
# 6444b9defbd24195a87e0f159f9ab743
msgid "On successful post, we pass the related object and post data back, which may have come from the session, for each of the comments and ratings view functions to deal with as needed."
msgstr ""

#: ../../mezzanine/generic/views.py:docstring of mezzanine.generic.views.rating:1
# 9da979df8a504c95b08757ab4918b8d3
msgid "Handle a ``RatingForm`` submission and redirect back to its related object."
msgstr ""

#: ../packages.rst:161
# 0fa364e844c24c1a86b902f574f9cf02
msgid "``mezzanine.generic.forms``"
msgstr ""

#: ../../mezzanine/generic/forms.py:docstring of mezzanine.generic.forms.KeywordsWidget:1
# 72dc30747e51470b9db0675fb7a7ce2f
msgid "Form field for the ``KeywordsField`` generic relation field. Since the admin with model forms has no form field for generic relations, this form field provides a single field for managing the keywords. It contains two actual widgets, a text input for entering keywords, and a hidden input that stores the ID of each ``Keyword`` instance."
msgstr ""

#: ../../mezzanine/generic/forms.py:docstring of mezzanine.generic.forms.KeywordsWidget:8
# 97f7c6f006c447baaba1f15f3af79e1d
msgid "The attached JavaScript adds behaviour so that when the form is submitted, an AJAX post is made that passes the list of keywords in the text input, and returns a list of keyword IDs which are then entered into the hidden input before the form submits. The list of IDs in the hidden input is what is used when retrieving an actual value from the field for the form."
msgstr ""

#: ../../mezzanine/generic/forms.py:docstring of mezzanine.generic.forms.KeywordsWidget.decompress:1
# 7241302789b343ca8c4a9aab71efb814
msgid "Takes the sequence of ``AssignedKeyword`` instances and splits them into lists of keyword IDs and titles each mapping to one of the form field widgets."
msgstr ""

#: ../../mezzanine/generic/forms.py:docstring of mezzanine.generic.forms.KeywordsWidget.format_output:1
# 574a5bf26dd34d9dbc895718c2f08139
msgid "Wraps the output HTML with a list of all available ``Keyword`` instances that can be clicked on to toggle a keyword."
msgstr ""

#: ../../mezzanine/generic/forms.py:docstring of mezzanine.generic.forms.KeywordsWidget.value_from_datadict:1
# 2c361f4a40d540ca949eab5a3d08df5c
msgid "Return the comma separated list of keyword IDs for use in ``KeywordsField.save_form_data()``."
msgstr ""

#: ../../mezzanine/generic/forms.py:docstring of mezzanine.generic.forms.RatingForm:1
# e852ae734e4b4e78835a14f65414c7e0
msgid "Form for a rating. Subclasses ``CommentSecurityForm`` to make use of its easy setup for generic relations."
msgstr ""

#: ../../mezzanine/generic/forms.py:docstring of mezzanine.generic.forms.RatingForm.clean:1
# c8885d2e25ae4252b79a957313389c82
msgid "Check unauthenticated user's cookie as a light check to prevent duplicate votes."
msgstr ""

#: ../../mezzanine/generic/forms.py:docstring of mezzanine.generic.forms.RatingForm.save:1
# bf7700d896494fa2a168b078050947ca
msgid "Saves a new rating - authenticated users can update the value if they've previously rated."
msgstr ""

#: ../packages.rst:167
# 856a4872d8104bcf9327bda8fd03a480
msgid "``mezzanine.generic.admin``"
msgstr ""

#: ../../mezzanine/generic/admin.py:docstring of mezzanine.generic.admin.ThreadedCommentAdmin:1
# ff5d63050bcf43f9b0c76cb84afa5d14
msgid "Admin class for comments."
msgstr ""

#: ../packages.rst:173
# 6c52c1ce9b5744578d4e4cb00b70066a
msgid "``mezzanine.generic.templatetags.comment_tags``"
msgstr ""

#: ../../mezzanine/generic/templatetags/comment_tags.py:docstring of mezzanine.generic.templatetags.comment_tags.comment_filter:1
# 568dee0f34924489b65835626e5931f8
msgid "Passed comment text to be rendered through the function defined by the ``COMMENT_FILTER`` setting. If no function is defined (the default), Django's ``linebreaksbr`` and ``urlize`` filters are used."
msgstr ""

#: ../../mezzanine/generic/templatetags/comment_tags.py:docstring of mezzanine.generic.templatetags.comment_tags.comment_thread:1
# 44d68f03bc77412c9a1738587cdf381b
msgid "Return a list of child comments for the given parent, storing all comments in a dict in the context when first called, using parents as keys for retrieval on subsequent recursive calls from the comments template."
msgstr ""

#: ../../mezzanine/generic/templatetags/comment_tags.py:docstring of mezzanine.generic.templatetags.comment_tags.comments_for:1
# 77db61e3610e4c95b158f045b3a25784
msgid "Provides a generic context variable name for the object that comments are being rendered for."
msgstr ""

#: ../../mezzanine/generic/templatetags/comment_tags.py:docstring of mezzanine.generic.templatetags.comment_tags.recent_comments:1
# 39e090d53222488f98cedef168a22b85
msgid "Dashboard widget for displaying recent comments."
msgstr ""

#: ../packages.rst:179
# cf66d242723a4537aef876efa7f66d0f
msgid "``mezzanine.generic.templatetags.disqus_tags``"
msgstr ""

#: ../../mezzanine/generic/templatetags/disqus_tags.py:docstring of mezzanine.generic.templatetags.disqus_tags.disqus_id_for:1
# 44f2c44c060942ee9813e4c92fc8f42b
msgid "Returns a unique identifier for the object to be used in DISQUS JavaScript."
msgstr ""

#: ../../mezzanine/generic/templatetags/disqus_tags.py:docstring of mezzanine.generic.templatetags.disqus_tags.disqus_sso_script:1
# 5e1910a18c594755ab46f6f766e15fc1
msgid "Provides a generic context variable which adds single-sign-on support to DISQUS if ``COMMENTS_DISQUS_API_PUBLIC_KEY`` and ``COMMENTS_DISQUS_API_SECRET_KEY`` are specified."
msgstr ""

#: ../packages.rst:185
# 2cd4edce7fff4f52880b3f318564f49e
msgid "``mezzanine.generic.templatetags.keyword_tags``"
msgstr ""

#: ../../mezzanine/generic/templatetags/keyword_tags.py:docstring of mezzanine.generic.templatetags.keyword_tags.keywords_for:1
# 25a168b5a3ea401e8910ec7cca51e038
msgid "Return a list of ``Keyword`` objects for the given model instance or a model class. In the case of a model class, retrieve all keywords for all instances of the model and apply a ``weight`` attribute that can be used to create a tag cloud."
msgstr ""

#: ../packages.rst:191
# 80e30b240c9d491eae1e93f0e67c707e
msgid "``mezzanine.generic.templatetags.rating_tags``"
msgstr ""

#: ../../mezzanine/generic/templatetags/rating_tags.py:docstring of mezzanine.generic.templatetags.rating_tags.rating_for:1
# 5a04a01f35b6493eadac9a438dad218c
msgid "Provides a generic context variable name for the object that ratings are being rendered for, and the rating form."
msgstr ""

#: ../packages.rst:200
# a597a3b2385d4fad9cbeff2b706e024d
msgid "``mezzanine.blog``"
msgstr ""

#: ../../mezzanine/blog/__init__.py:docstring of mezzanine.blog:1
# eaed417adb5c4b638c04627d8b9cf70e
msgid "Provides a blogging app with posts, keywords, categories and comments. Posts can be listed by month, keyword, category or author."
msgstr ""

#: ../packages.rst:205
# 2930cfb9706a45c488bd9a6b3ac9c0d0
msgid "``mezzanine.blog.models``"
msgstr ""

#: ../../mezzanine/blog/models.py:docstring of mezzanine.blog.models.BlogCategory:1
# 4100a69c5e234062ad8576b4adb6e2bd
msgid "A category for grouping blog posts into a series."
msgstr ""

#: ../../mezzanine/blog/models.py:docstring of mezzanine.blog.models.BlogPost:1
# 05a88d1ae8434125b2220aeafd7c65c1
msgid "A blog post."
msgstr ""

#: ../../mezzanine/blog/models.py:docstring of mezzanine.blog.models.BlogPost.get_absolute_url:1
# 09cdff371e354bf69f75df4caeba577d
msgid "URLs for blog posts can either be just their slug, or prefixed with a portion of the post's publish date, controlled by the setting ``BLOG_URLS_DATE_FORMAT``, which can contain the value ``year``, ``month``, or ``day``. Each of these maps to the name of the corresponding urlpattern, and if defined, we loop through each of these and build up the kwargs for the correct urlpattern. The order which we loop through them is important, since the order goes from least granualr (just year) to most granular (year/month/day)."
msgstr ""

#: ../packages.rst:211
# 0b548bcc598541e9ae3622e48da7cb92
msgid "``mezzanine.blog.views``"
msgstr ""

#: ../../mezzanine/blog/views.py:docstring of mezzanine.blog.views.blog_post_detail:1
# 70e4fa2224b04453b49903415ae1031b
msgid ". Custom templates are checked for using the name ``blog/blog_post_detail_XXX.html`` where ``XXX`` is the blog posts's slug."
msgstr ""

#: ../../mezzanine/blog/views.py:docstring of mezzanine.blog.views.blog_post_feed:1
# 96c4db95f60449bdbc39214b4185ad5a
msgid "Blog posts feeds - maps format to the correct feed view."
msgstr ""

#: ../../mezzanine/blog/views.py:docstring of mezzanine.blog.views.blog_post_list:1
# 9e18c03e12284de994b9c4be931294fb
msgid "Display a list of blog posts that are filtered by tag, year, month, author or category. Custom templates are checked for using the name ``blog/blog_post_list_XXX.html`` where ``XXX`` is either the category slug or author's username if given."
msgstr ""

#: ../packages.rst:217
# 8fa1d21413d844f2a1a154307f74f6a2
msgid "``mezzanine.blog.forms``"
msgstr ""

#: ../../mezzanine/blog/forms.py:docstring of mezzanine.blog.forms.BlogPostForm:1
# 5862b6429a7247b79822fdb35dec3bd4
msgid "Model form for ``BlogPost`` that provides the quick blog panel in the admin dashboard."
msgstr ""

#: ../packages.rst:223
# 675f9a0e6cc34407976fbc4db72e689c
msgid "``mezzanine.blog.admin``"
msgstr ""

#: ../../mezzanine/blog/admin.py:docstring of mezzanine.blog.admin.BlogCategoryAdmin:1
# fef897f5b095485c80d9cb9864e4a2a9
msgid "Admin class for blog categories. Hides itself from the admin menu unless explicitly specified."
msgstr ""

#: ../../mezzanine/blog/admin.py:docstring of mezzanine.blog.admin.BlogCategoryAdmin.in_menu:1
# 8cd4c10d0854416092fa4fdfd9cbe534
msgid "Hide from the admin menu unless explicitly set in ``ADMIN_MENU_ORDER``."
msgstr ""

#: ../../mezzanine/blog/admin.py:docstring of mezzanine.blog.admin.BlogPostAdmin:1
# 86ddd4e34d664d99945ce6053047c9f5
msgid "Admin class for blog posts."
msgstr ""

#: ../../mezzanine/blog/admin.py:docstring of mezzanine.blog.admin.BlogPostAdmin.save_form:1
# 974dc21a241845f49ea973b378d628a0
msgid "Super class ordering is important here - user must get saved first."
msgstr ""

#: ../packages.rst:229
# 937e0fade67d45aa8b6c50b811e55630
msgid "``mezzanine.blog.feeds``"
msgstr ""

#: ../../mezzanine/blog/feeds.py:docstring of mezzanine.blog.feeds.PostsAtom:1
# d307b00537da4619b14a14d16bf7ebca
msgid "Atom feed for all blog posts."
msgstr ""

#: ../../mezzanine/blog/feeds.py:docstring of mezzanine.blog.feeds.PostsRSS:1
# bc9a2057d92447e4ba175c3e9d7641fb
msgid "RSS feed for all blog posts."
msgstr ""

#: ../packages.rst:235
# 92a55cb926ae4736a63c3282346054a2
msgid "``mezzanine.blog.templatetags.blog_tags``"
msgstr ""

#: ../../mezzanine/blog/templatetags/blog_tags.py:docstring of mezzanine.blog.templatetags.blog_tags.blog_authors:1
# c740f3f49714428aabae528fbdfd2ae0
msgid "Put a list of authors (users) for blog posts into the template context."
msgstr ""

#: ../../mezzanine/blog/templatetags/blog_tags.py:docstring of mezzanine.blog.templatetags.blog_tags.blog_categories:1
# d3d373f9c8a84165be589c05ab2d54a0
msgid "Put a list of categories for blog posts into the template context."
msgstr ""

#: ../../mezzanine/blog/templatetags/blog_tags.py:docstring of mezzanine.blog.templatetags.blog_tags.blog_months:1
# f9ab95980bf64a1d9df21414ef4b56ca
msgid "Put a list of dates for blog posts into the template context."
msgstr ""

#: ../../mezzanine/blog/templatetags/blog_tags.py:docstring of mezzanine.blog.templatetags.blog_tags.blog_recent_posts:1
# 96c9ff701d624c4b8c46d5376a1590c6
msgid "Put a list of recently published blog posts into the template context. A tag title or slug, category title or slug or author's username can also be specified to filter the recent posts returned."
msgstr ""

#: ../../mezzanine/blog/templatetags/blog_tags.py:docstring of mezzanine.blog.templatetags.blog_tags.blog_recent_posts:5
# 02ba80d83f0544be9970acf15e34baa3
msgid "Usage::"
msgstr ""

#: ../../mezzanine/blog/templatetags/blog_tags.py:docstring of mezzanine.blog.templatetags.blog_tags.quick_blog:1
# 62afcbeddeed423598b9071aba569d33
msgid "Admin dashboard tag for the quick blog form."
msgstr ""

#: ../packages.rst:241
# cb7c8fc3109548b3a9841a42c8c3bfc2
msgid "``mezzanine.blog.management.base``"
msgstr ""

#: ../../mezzanine/blog/management/base.py:docstring of mezzanine.blog.management.base.BaseImporterCommand:1
# 8e5a08d353e04a399d85f81ea7b18646
msgid "Base importer command for blogging platform specific management commands to subclass when importing blog posts into Mezzanine. The ``handle_import`` method should be overridden to provide the import mechanism specific to the blogging platform being dealt with."
msgstr ""

#: ../../mezzanine/blog/management/base.py:docstring of mezzanine.blog.management.base.BaseImporterCommand.add_comment:1
# 1c3bcd06c6e34f17857140af541cca76
msgid "Adds a comment to the post provided."
msgstr ""

#: ../../mezzanine/blog/management/base.py:docstring of mezzanine.blog.management.base.BaseImporterCommand.add_meta:1
# b503886a01d242b0807cfc1a714287bc
msgid "Adds tags and a redirect for the given obj, which is a blog post or a page."
msgstr ""

#: ../../mezzanine/blog/management/base.py:docstring of mezzanine.blog.management.base.BaseImporterCommand.add_page:1
# f97ab20bb9884fa89957ef41d21fa810
msgid "Adds a page to the list of pages to be imported - used by the Wordpress importer."
msgstr ""

#: ../../mezzanine/blog/management/base.py:docstring of mezzanine.blog.management.base.BaseImporterCommand.add_post:1
# c38de7f98ac04cba8df144186ee9d281
msgid "Adds a post to the post list for processing."
msgstr ""

#: ../../mezzanine/blog/management/base.py:docstring of mezzanine.blog.management.base.BaseImporterCommand.add_post:3
# 84d6facd32384c98a54c970a25ddfcb6
msgid "``title`` and ``content`` are strings for the post."
msgstr ""

#: ../../mezzanine/blog/management/base.py:docstring of mezzanine.blog.management.base.BaseImporterCommand.add_post:4
# fe3b9685f4c14521bf0316a90e24d6be
msgid "``old_url`` is a string that a redirect will be created for."
msgstr ""

#: ../../mezzanine/blog/management/base.py:docstring of mezzanine.blog.management.base.BaseImporterCommand.add_post:5
# 15711171641d4577aa28c7655f2edaee
msgid "``pub_date`` is assumed to be a ``datetime`` object."
msgstr ""

#: ../../mezzanine/blog/management/base.py:docstring of mezzanine.blog.management.base.BaseImporterCommand.add_post:6
# 84903b621d9f4e07b1a28ffb5512d21f
msgid "``tags`` and ``categories`` are sequences of strings."
msgstr ""

#: ../../mezzanine/blog/management/base.py:docstring of mezzanine.blog.management.base.BaseImporterCommand.add_post:7
# fe492f363444460a940ca8b744beb8c3
msgid "``comments`` is a sequence of dicts - each dict should be the return value of ``add_comment``."
msgstr ""

#: ../../mezzanine/blog/management/base.py:docstring of mezzanine.blog.management.base.BaseImporterCommand.handle:1
# a1bcd8acd85e4ed190352ca51f211f9d
msgid "Processes the converted data into the Mezzanine database correctly."
msgstr ""

#: ../../mezzanine/blog/management/base.py:docstring of mezzanine.blog.management.base.BaseImporterCommand.handle:4
# b4c65f27534b4befb69fd63fe288ac7e
msgid "Attributes:"
msgstr ""

#: ../../mezzanine/blog/management/base.py:docstring of mezzanine.blog.management.base.BaseImporterCommand.handle:4
# a1b7af43bb47471f99d3d481fcd8bd8d
msgid "mezzanine_user: the user to put this data in against date_format: the format the dates are in for posts and comments"
msgstr ""

#: ../../mezzanine/blog/management/base.py:docstring of mezzanine.blog.management.base.BaseImporterCommand.handle_import:1
# 102524d0530b48b28ff11fc0b6c75cf1
msgid "Should be overridden by subclasses - performs the conversion from the originating data source into the lists of posts and comments ready for processing."
msgstr ""

#: ../../mezzanine/blog/management/base.py:docstring of mezzanine.blog.management.base.BaseImporterCommand.trunc:1
# bb9f00a8a4c040cf8b62b26058a1809c
msgid "Truncates fields values for the given model. Prompts for a new value if truncation occurs."
msgstr ""

#: ../packages.rst:247
# 404d267f89e947ee952ac1666e1647b5
msgid "``mezzanine.blog.management.commands``"
msgstr ""

#: ../../mezzanine/blog/management/commands/import_rss.py:docstring of mezzanine.blog.management.commands.import_rss.Command:1
# 134c8e2a7f7b48de94799f355c0df46d
msgid "Import an RSS feed into the blog app."
msgstr ""

#: ../../mezzanine/blog/management/commands/import_blogger.py:docstring of mezzanine.blog.management.commands.import_blogger.Command:1
# 8066a6c579ee4cbba79445f733d03b98
msgid "Implements a Blogger importer. Takes a Blogger ID in order to be able to determine which blog it should point to and harvest the XML from."
msgstr ""

#: ../../mezzanine/blog/management/commands/import_blogger.py:docstring of mezzanine.blog.management.commands.import_blogger.Command.handle_import:1
# e9596450730f439f943a072faf355a0e
msgid "Gets posts from Blogger."
msgstr ""

#: ../../mezzanine/blog/management/commands/import_wordpress.py:docstring of mezzanine.blog.management.commands.import_wordpress.Command:1
# 69c8dfccffd248919fd0751c2b9ca92e
msgid "Implements a Wordpress importer. Takes a file path or a URL for the Wordpress Extended RSS file."
msgstr ""

#: ../../mezzanine/blog/management/commands/import_wordpress.py:docstring of mezzanine.blog.management.commands.import_wordpress.Command.get_text:1
# 40625f8966924a2ca87cd2fc92bb9c6c
msgid "Gets the element's text value from the XML object provided."
msgstr ""

#: ../../mezzanine/blog/management/commands/import_wordpress.py:docstring of mezzanine.blog.management.commands.import_wordpress.Command.handle_import:1
# 348a7a39c10a4c62be33b805b121a84f
msgid "Gets the posts from either the provided URL or the path if it is local."
msgstr ""

#: ../../mezzanine/blog/management/commands/import_wordpress.py:docstring of mezzanine.blog.management.commands.import_wordpress.Command.wp_caption:1
# 21c8c0d7ce054da19ef1ff140132e6bd
msgid "Filters a Wordpress Post for Image Captions and renders to match HTML."
msgstr ""

#: ../../mezzanine/blog/management/commands/import_tumblr.py:docstring of mezzanine.blog.management.commands.import_tumblr.Command:1
# ab4757d3e6e8423681b8ba3ab550fe43
msgid "Import Tumblr blog posts into the blog app."
msgstr ""

#: ../../mezzanine/blog/management/commands/import_tumblr.py:docstring of mezzanine.blog.management.commands.import_tumblr.title_from_content:1
# 9f8ea1a4764e4eff908d8aa5c1914ff0
msgid "Try and extract the first sentence from a block of test to use as a title."
msgstr ""

#: ../packages.rst:264
# d8c78c3dbcb8403a9cf66e7e0c0945ef
msgid "``mezzanine.accounts``"
msgstr ""

#: ../../mezzanine/accounts/__init__.py:docstring of mezzanine.accounts:1
# 65abf7ba47c945bcacbd373eb9c077f8
msgid "Provides features for non-staff user accounts, such as login, signup with optional email verification, password reset, and integration with user profiles models defined by the ``AUTH_PROFILE_MODULE`` setting. Some utility functions for probing the profile model are included below."
msgstr ""

#: ../../mezzanine/accounts/__init__.py:docstring of mezzanine.accounts.get_profile_for_user:1
# ff7a309792164bb4b11e7f189ecfa640
msgid "Returns site-specific profile for this user. Raises ``ProfileNotConfigured`` if ``settings.AUTH_PROFILE_MODULE`` is not set, and ``ImproperlyConfigured`` if the corresponding model can't be found."
msgstr ""

#: ../../mezzanine/accounts/__init__.py:docstring of mezzanine.accounts.get_profile_form:1
# e54c343334554298b87b27537952785c
msgid "Returns the profile form defined by ``settings.ACCOUNTS_PROFILE_FORM_CLASS``."
msgstr ""

#: ../../mezzanine/accounts/__init__.py:docstring of mezzanine.accounts.get_profile_model:1
# 6d112555e99e49a2abf371a723ee3d14
msgid "Returns the Mezzanine profile model, defined in ``settings.AUTH_PROFILE_MODULE``, or ``None`` if no profile model is configured."
msgstr ""

#: ../../mezzanine/accounts/__init__.py:docstring of mezzanine.accounts.get_profile_user_fieldname:1
# 1d5ba3a8641b427a98f0cf087ba053c9
msgid "Returns the name of the first field on the profile model that points to the ``auth.User`` model."
msgstr ""

#: ../packages.rst:270
# 8f353cb850ca4298a5e836a05e8440b7
msgid "``mezzanine.accounts.views``"
msgstr ""

#: ../../mezzanine/accounts/views.py:docstring of mezzanine.accounts.views.account_redirect:1
# 2be273bd0f4b43f895fa536e90fdb3b2
msgid "Just gives the URL prefix for accounts an action - redirect to the profile update form."
msgstr ""

#: ../../mezzanine/accounts/views.py:docstring of mezzanine.accounts.views.login:1
# 0cb0ee513b1c4065a96cceb79e340378
msgid "Login form."
msgstr ""

#: ../../mezzanine/accounts/views.py:docstring of mezzanine.accounts.views.logout:1
# f054d27d73944da4a19558b731e87073
msgid "Log the user out."
msgstr ""

#: ../../mezzanine/accounts/views.py:docstring of mezzanine.accounts.views.old_account_redirect:1
# adb5324c3a524ef79422137ea14f17d3
msgid "Catches and redirects any unmatched account URLs to their correct version (account/ to accounts/) as per #934. The URL is constructed manually, handling slashes as appropriate."
msgstr ""

#: ../../mezzanine/accounts/views.py:docstring of mezzanine.accounts.views.profile:1
# 10566155247442ac8398344021a55b08
msgid "Display a profile."
msgstr ""

#: ../../mezzanine/accounts/views.py:docstring of mezzanine.accounts.views.profile_redirect:1
# bcfc35dbd1ed42c09f2ed8a154c0ea42
msgid "Just gives the URL prefix for profiles an action - redirect to the logged in user's profile."
msgstr ""

#: ../../mezzanine/accounts/views.py:docstring of mezzanine.accounts.views.profile_update:1
# 5de46b4a9030494ab0e2c599a6aaf7a5
msgid "Profile update form."
msgstr ""

#: ../../mezzanine/accounts/views.py:docstring of mezzanine.accounts.views.signup:1
# 1081c59c406e4e8b9800a97215c54f2d
msgid "Signup form."
msgstr ""

#: ../../mezzanine/accounts/views.py:docstring of mezzanine.accounts.views.signup_verify:1
# 41976e8125f744378d8b1b9f6994bce2
msgid "View for the link in the verification email sent to a new user when they create an account and ``ACCOUNTS_VERIFICATION_REQUIRED`` is set to ``True``. Activates the user and logs them in, redirecting to the URL they tried to access when signing up."
msgstr ""

#: ../packages.rst:276
# 1aebe117884c426d95f26d1c5d258bf8
msgid "``mezzanine.accounts.forms``"
msgstr ""

#: ../../mezzanine/accounts/forms.py:docstring of mezzanine.accounts.forms.LoginForm:1
# 727b90cabb4f4ec98c350206a277b3ac
msgid "Fields for login."
msgstr ""

#: ../../mezzanine/accounts/forms.py:docstring of mezzanine.accounts.forms.LoginForm.clean:1
# 1b28d58d29774272a21565b7581bf051
msgid "Authenticate the given username/email and password. If the fields are valid, store the authenticated user for returning via save()."
msgstr ""

#: ../../mezzanine/accounts/forms.py:docstring of mezzanine.accounts.forms.LoginForm.save:1
# 1686a2dd14c246129850ec842acd900d
msgid "Just return the authenticated user - used for logging in."
msgstr ""

#: ../../mezzanine/accounts/forms.py:docstring of mezzanine.accounts.forms.PasswordResetForm:1
# 6d59961ec17441e992b2a4a9cffbeb7a
msgid "Validates the user's username or email for sending a login token for authenticating to change their password."
msgstr ""

#: ../../mezzanine/accounts/forms.py:docstring of mezzanine.accounts.forms.PasswordResetForm.save:1
# cbbab56bf90540baa7b2186baf3b943f
msgid "Just return the authenticated user - used for sending login email."
msgstr ""

#: ../../mezzanine/accounts/forms.py:docstring of mezzanine.accounts.forms.ProfileForm:1
# b0dc996a69704b8883d21ffe32a6023f
msgid "ModelForm for auth.User - used for signup and profile update. If a Profile model is defined via ``AUTH_PROFILE_MODULE``, its fields are injected into the form."
msgstr ""

#: ../../mezzanine/accounts/forms.py:docstring of mezzanine.accounts.forms.ProfileForm.clean_email:1
# bc3470d7afa5461c90108e6768c3fb3b
msgid "Ensure the email address is not already registered."
msgstr ""

#: ../../mezzanine/accounts/forms.py:docstring of mezzanine.accounts.forms.ProfileForm.clean_password2:1
# 39dd0245d01f486eb38ed4404d178a86
msgid "Ensure the password fields are equal, and match the minimum length defined by ``ACCOUNTS_MIN_PASSWORD_LENGTH``."
msgstr ""

#: ../../mezzanine/accounts/forms.py:docstring of mezzanine.accounts.forms.ProfileForm.clean_username:1
# db11802e0a014598823e68f002a0e443
msgid "Ensure the username doesn't exist or contain invalid chars. We limit it to slugifiable chars since it's used as the slug for the user's profile view."
msgstr ""

#: ../../mezzanine/accounts/forms.py:docstring of mezzanine.accounts.forms.ProfileForm.save:1
# 00507985fa0d4a6393965400c9d1f2be
msgid "Create the new user. If no username is supplied (may be hidden via ``ACCOUNTS_PROFILE_FORM_EXCLUDE_FIELDS`` or ``ACCOUNTS_NO_USERNAME``), we generate a unique username, so that if profile pages are enabled, we still have something to use as the profile's slug."
msgstr ""

#: ../packages.rst:282
# 6e1cb9be07674269b9f16466742fa153
msgid "``mezzanine.accounts.templatetags.accounts_tags``"
msgstr ""

#: ../../mezzanine/accounts/templatetags/accounts_tags.py:docstring of mezzanine.accounts.templatetags.accounts_tags.login_form:1
# abd46b30c1ff43679fc3d7b305c6cace
msgid "Returns the login form:"
msgstr ""

#: ../../mezzanine/accounts/templatetags/accounts_tags.py:docstring of mezzanine.accounts.templatetags.accounts_tags.login_form:3
# 848663df5736418f9cf8d1ad61a75005
msgid "{% login_form as form %} {{ form }}"
msgstr ""

#: ../../mezzanine/accounts/templatetags/accounts_tags.py:docstring of mezzanine.accounts.templatetags.accounts_tags.profile_fields:1
# 927a771791684615847ec38c949053fc
msgid "Returns profile fields as a dict for the given user. Used in the profile view template when the ``ACCOUNTS_PROFILE_VIEWS_ENABLED`` setting is set to ``True``, and also in the account approval emails sent to administrators when the ``ACCOUNTS_APPROVAL_REQUIRED`` setting is set to ``True``."
msgstr ""

#: ../../mezzanine/accounts/templatetags/accounts_tags.py:docstring of mezzanine.accounts.templatetags.accounts_tags.profile_form:1
# 121ddb0002234dc69f739ab802c50db7
msgid "Returns the profile form for a user:"
msgstr ""

#: ../../mezzanine/accounts/templatetags/accounts_tags.py:docstring of mezzanine.accounts.templatetags.accounts_tags.profile_form:3
# 02fc0ba1bc8843d18704efa7c98b698e
msgid "{% if request.user.is_authenticated %} {% profile_form request.user as form %} {{ form }} {% endif %}"
msgstr ""

#: ../../mezzanine/accounts/templatetags/accounts_tags.py:docstring of mezzanine.accounts.templatetags.accounts_tags.signup_form:1
# e30f946b581741aaa60aba0787525ae3
msgid "Returns the signup form:"
msgstr ""

#: ../../mezzanine/accounts/templatetags/accounts_tags.py:docstring of mezzanine.accounts.templatetags.accounts_tags.signup_form:3
# 21ef194596c9483cb823e509e9eaa0de
msgid "{% signup_form as form %} {{ form }}"
msgstr ""

#: ../../mezzanine/accounts/templatetags/accounts_tags.py:docstring of mezzanine.accounts.templatetags.accounts_tags.username_or:1
# 7fafce02576942658a7a05b0a7d7555a
msgid "Returns the user's username for display, or an alternate attribute if ``ACCOUNTS_NO_USERNAME`` is set to ``True``."
msgstr ""

#: ../packages.rst:288
# 81852cea96bf48db81a91dc21efa8057
msgid "``mezzanine.accounts.admin``"
msgstr ""

#: ../packages.rst:296
# d0415451af3b4b56b17dfb6da8e9b25f
msgid "``mezzanine.forms``"
msgstr ""

#: ../../mezzanine/forms/__init__.py:docstring of mezzanine.forms:1
# f0f73b5858664f7aa3da8609335628cf
msgid "A port of django-forms-builder for Mezzanine. Allows admin users to create their own HTML5 forms and export form submissions as CSV."
msgstr ""

#: ../packages.rst:301
# 5b3eb2ccc3194237a8fb14ae42246caa
msgid "``mezzanine.forms.models``"
msgstr ""

#: ../../mezzanine/forms/models.py:docstring of mezzanine.forms.models.Field:1
# bcd3eb0a702c4c698d2aee92791800cb
msgid "A field for a user-built form."
msgstr ""

#: ../../mezzanine/forms/models.py:docstring of mezzanine.forms.models.Field.get_choices:1
# 4dee322141ad4d36a6c86f3d004e876c
msgid "Parse a comma separated choice string into a list of choices taking into account quoted choices."
msgstr ""

#: ../../mezzanine/forms/models.py:docstring of mezzanine.forms.models.Field.is_a:1
# 143d7e7db37f4deca49c5a77504b5e51
msgid "Helper that returns ``True`` if the field's type is given in any arg."
msgstr ""

#: ../../mezzanine/forms/models.py:docstring of mezzanine.forms.models.FieldEntry:1
# dd64982cc10e4a0aa67867c916a38615
msgid "A single field value for a form entry submitted via a user-built form."
msgstr ""

#: ../../mezzanine/forms/models.py:docstring of mezzanine.forms.models.FieldManager:1
# 40cfa3056988424b819e92f4b8f5253e
msgid "Only show visible fields when displaying actual form.."
msgstr ""

#: ../../mezzanine/forms/models.py:docstring of mezzanine.forms.models.Form:1
# 1f75202659a0405eacb8530d7a123936
msgid "A user-built form."
msgstr ""

#: ../../mezzanine/forms/models.py:docstring of mezzanine.forms.models.FormEntry:1
# 136e09fcccc840d4a657323c4bfe90f6
msgid "An entry submitted via a user-built form."
msgstr ""

#: ../packages.rst:307
# 95511e1ece2642ed9cd9ca8803d8031a
msgid "``mezzanine.forms.forms``"
msgstr ""

#: ../../mezzanine/forms/forms.py:docstring of mezzanine.forms.forms.EntriesForm:1
# f7bcf12c99144016be7641c0e9db6e4b
msgid "Form with a set of fields dynamically assigned that can be used to filter entries for the given ``forms.models.Form`` instance."
msgstr ""

#: ../../mezzanine/forms/forms.py:docstring of mezzanine.forms.forms.EntriesForm.columns:1
# c8d7f6cd2d8f49b2ad5ca0f364ecc919
msgid "Returns the list of selected column names."
msgstr ""

#: ../../mezzanine/forms/forms.py:docstring of mezzanine.forms.forms.EntriesForm.rows:1
# e2093f072aa546609bdc270387320db1
msgid "Returns each row based on the selected criteria."
msgstr ""

#: ../../mezzanine/forms/forms.py:docstring of mezzanine.forms.forms.FormForForm:1
# eeb13f4372e24c71a410669c79d00b16
msgid "Form with a set of fields dynamically assigned, directly based on the given ``forms.models.Form`` instance."
msgstr ""

#: ../../mezzanine/forms/forms.py:docstring of mezzanine.forms.forms.FormForForm.email_to:1
# 8382ebfaa1ba4229b5421c5a6a37c8eb
msgid "Return the value entered for the first field of type ``forms.fields.EMAIL``."
msgstr ""

#: ../../mezzanine/forms/forms.py:docstring of mezzanine.forms.forms.FormForForm.save:1
# 4c24ac5312824b68914ed7c00dc20a54
msgid "Create a ``FormEntry`` instance and related ``FieldEntry`` instances for each form field."
msgstr ""

#: ../packages.rst:313
# c8818f81877541288baba021396ce9c7
msgid "``mezzanine.forms.page_processors``"
msgstr ""

#: ../../mezzanine/forms/page_processors.py:docstring of mezzanine.forms.page_processors.form_processor:1
# 5f9923d3daf04809862d78b62c3363e4
msgid "Display a built form and handle submission."
msgstr ""

#: ../../mezzanine/forms/page_processors.py:docstring of mezzanine.forms.page_processors.format_value:1
# be5f60ab40d94c9d938b43b4b2fb7d29
msgid "Convert a list into a comma separated string, for displaying select multiple values in emails."
msgstr ""

#: ../packages.rst:319
# 3bff495ad108440c806211429dfb950c
msgid "``mezzanine.forms.admin``"
msgstr ""

#: ../../mezzanine/forms/admin.py:docstring of mezzanine.forms.admin.FieldAdmin:1
# 45a917ced9e3468eac28fed5ce5de537
msgid "Admin class for the form field. Inherits from TabularDynamicInlineAdmin to add dynamic \"Add another\" link and drag/drop ordering."
msgstr ""

#: ../../mezzanine/forms/admin.py:docstring of mezzanine.forms.admin.FormAdmin:1
# fc30558d875e42f695ac27fe207bb649
msgid "Admin class for the Form model. Includes the urls & views for exporting form entries as CSV and downloading files uploaded via the forms app."
msgstr ""

#: ../../mezzanine/forms/admin.py:docstring of mezzanine.forms.admin.FormAdmin.entries_view:1
# 6745ef52855e4a7d8febf49c304f2d0e
msgid "Displays the form entries in a HTML table with option to export as CSV file."
msgstr ""

#: ../../mezzanine/forms/admin.py:docstring of mezzanine.forms.admin.FormAdmin.file_view:1
# 77333a7585944102a5a2455bb60085ca
msgid "Output the file for the requested field entry."
msgstr ""

#: ../../mezzanine/forms/admin.py:docstring of mezzanine.forms.admin.FormAdmin.get_urls:1
# d591141a191f45899fea8153b5f2282f
msgid "Add the entries view to urls."
msgstr ""

#: ../packages.rst:328
# e05d1c5ec5a54697b12a797952108bc9
msgid "``mezzanine.galleries``"
msgstr ""

#: ../../mezzanine/galleries/__init__.py:docstring of mezzanine.galleries:1
# e36d4ea00bf14ed585ef9e2c3748302f
msgid "Implements a photo gallery content type."
msgstr ""

#: ../packages.rst:333
# 9445da5fe9fe485d84503ba3e99d688c
msgid "``mezzanine.galleries.models``"
msgstr ""

#: ../../mezzanine/galleries/models.py:docstring of mezzanine.galleries.models.Gallery:1
# be3029198bd14a16bd8efffb8052b66b
msgid "Page bucket for gallery photos."
msgstr ""

#: ../../mezzanine/galleries/models.py:docstring of mezzanine.galleries.models.Gallery.save:1
# 06218f82d51f41149159d31fcd6ed4e1
msgid "If a zip file is uploaded, extract any images from it and add them to the gallery, before removing the zip file."
msgstr ""

#: ../../mezzanine/galleries/models.py:docstring of mezzanine.galleries.models.GalleryImage:1
# d4feb27746f341d1be60baf0275fa04f
msgid "GalleryImage(id, _order, gallery_id, file, description)"
msgstr ""

#: ../../mezzanine/galleries/models.py:docstring of mezzanine.galleries.models.GalleryImage.save:1
# 84b2bdd7655846feb6daea15b00fbf38
msgid "If no description is given when created, create one from the file name."
msgstr ""

#: ../packages.rst:339
# 5d465992761f4db58b8712dc2e874577
msgid "``mezzanine.galleries.admin``"
msgstr ""

#: ../packages.rst:348
# f61ea035d50941cbadc704a495dbec8a
msgid "``mezzanine.conf``"
msgstr ""

#: ../../mezzanine/conf/__init__.py:docstring of mezzanine.conf:1
# 79eaa18faa0f4ad58bf891abec428228
msgid "Drop-in replacement for ``django.conf.settings`` that provides a consistent access method for settings defined in applications, the project or Django itself. Settings can also be made editable via the admin."
msgstr ""

#: ../../mezzanine/conf/__init__.py:docstring of mezzanine.conf.Settings:1
# bf6e0e4b979a474db19df7e96119c31e
msgid "An object that provides settings via dynamic attribute access."
msgstr ""

#: ../../mezzanine/conf/__init__.py:docstring of mezzanine.conf.Settings:3
# a009fd25bc6e49bc9e03f5679bdbe835
msgid "Settings that are registered as editable will be stored in the database once the site settings form in the admin is first saved. When these values are accessed via this settings object, *all* database stored settings get retrieved from the database."
msgstr ""

#: ../../mezzanine/conf/__init__.py:docstring of mezzanine.conf.Settings:8
# 2be61230331945a5b5948b107d73febb
msgid "When accessing uneditable settings their default values are used, unless they've been given a value in the project's settings.py module."
msgstr ""

#: ../../mezzanine/conf/__init__.py:docstring of mezzanine.conf.Settings:12
# d841e81e722e4ba88d021b2ff62d58fb
msgid "The settings object also provides access to Django settings via ``django.conf.settings``, in order to provide a consistent method of access for all settings."
msgstr ""

#: ../../mezzanine/conf/__init__.py:docstring of mezzanine.conf.Settings.use_editable:1
# 115277191c69449eab1aed65ca8e3fab
msgid "Empty the editable settings cache and set the loaded flag to ``False`` so that settings will be loaded from the DB on next access. If the conf app is not installed then set the loaded flag to ``True`` in order to bypass DB lookup entirely."
msgstr ""

#: ../../mezzanine/conf/__init__.py:docstring of mezzanine.conf.register_setting:1
# 524352369720475c9c05715e7eaae2e3
msgid "Registers a setting that can be edited via the admin. This mostly equates to storing the given args as a dict in the ``registry`` dict by name."
msgstr ""

#: ../packages.rst:354
# d456933df72144649f0c7d58ee97b60f
msgid "``mezzanine.conf.models``"
msgstr ""

#: ../../mezzanine/conf/models.py:docstring of mezzanine.conf.models.Setting:1
# 55f3bfa6436a48389daf93cf541227f6
msgid "Stores values for ``mezzanine.conf`` that can be edited via the admin."
msgstr ""

#: ../packages.rst:360
# c694ca9acb824397b1e8752f74089ef1
msgid "``mezzanine.conf.forms``"
msgstr ""

#: ../../mezzanine/conf/forms.py:docstring of mezzanine.conf.forms.SettingsForm:1
# 31a00cfaaf5641ed84807fb6cd716b01
msgid "Form for settings - creates a field for each setting in ``mezzanine.conf`` that is marked as editable."
msgstr ""

#: ../../mezzanine/conf/forms.py:docstring of mezzanine.conf.forms.SettingsForm.format_help:1
# 57a717126e6c463c99e91790fa6787a3
msgid "Format the setting's description into HTML."
msgstr ""

#: ../../mezzanine/conf/forms.py:docstring of mezzanine.conf.forms.SettingsForm.save:1
# f2154102b8f04174b225e4e33c9b22d6
msgid "Save each of the settings to the DB."
msgstr ""

#: ../packages.rst:366
# 0564380b466c4e8ebf33e930dfd9bb44
msgid "``mezzanine.conf.admin``"
msgstr ""

#: ../../mezzanine/conf/admin.py:docstring of mezzanine.conf.admin.SettingsAdmin:1
# 99050299fa614f3a911a928838b2475a
msgid "Admin class for settings model. Redirect add/change views to the list view where a single form is rendered for editing all settings."
msgstr ""

#: ../packages.rst:372
# 44d0f6ba1ee944e9a54d3ac9c4fb140d
msgid "``mezzanine.conf.context_processors``"
msgstr ""

#: ../../mezzanine/conf/context_processors.py:docstring of mezzanine.conf.context_processors.TemplateSettings:1
# 6b0c7d1fec244a82a3957c4727732f53
msgid "Dict wrapper for template settings. This exists only to warn when deprecated settings are accessed in templates."
msgstr ""

#: ../../mezzanine/conf/context_processors.py:docstring of mezzanine.conf.context_processors.settings:1
# 58dd877e0c074012a37ca42a6ca36d2b
msgid "Add the settings object to the template context."
msgstr ""

#: ../packages.rst:381
# 32b5b7dd855146eda3aa133f265054c9
msgid "``mezzanine.template``"
msgstr ""

#: ../../mezzanine/template/__init__.py:docstring of mezzanine.template.Library:1
# 43c3eb83b43c4bbcbd4b2ef1fb57fc68
msgid "Extends ``django.template.Library`` providing several shortcuts that attempt to take the leg-work out of creating different types of template tags."
msgstr ""

#: ../../mezzanine/template/__init__.py:docstring of mezzanine.template.Library.as_tag:1
# 5f4983e1dbee4fa39080b016670b8022
msgid "Creates a tag expecting the format: ``{% tag_name as var_name %}`` The decorated func returns the value that is given to ``var_name`` in the template."
msgstr ""

#: ../../mezzanine/template/__init__.py:docstring of mezzanine.template.Library.inclusion_tag:1
# e479e80a41944af994c6cade562e6053
msgid "Replacement for Django's ``inclusion_tag`` which looks up device specific templates at render time."
msgstr ""

#: ../../mezzanine/template/__init__.py:docstring of mezzanine.template.Library.render_tag:1
# beff0fb8b7b740c39a3e56708dfb8cb3
msgid "Creates a tag using the decorated func as the render function for the template tag node. The render function takes two arguments - the template context and the tag token."
msgstr ""

#: ../../mezzanine/template/__init__.py:docstring of mezzanine.template.Library.to_end_tag:1
# 2f5c2178b026405abcf3adf9628b9dca
msgid "Creates a tag that parses until it finds the corresponding end tag, eg: for a tag named ``mytag`` it will parse until ``endmytag``. The decorated func's return value is used to render the parsed content and takes three arguments - the parsed content between the start and end tags, the template context and the tag token."
msgstr ""

#: ../packages.rst:387
# a6589f45df6c4d0494f3b6bea947c16e
msgid "``mezzanine.template.loader_tags``"
msgstr ""

#: ../../mezzanine/template/loader_tags.py:docstring of mezzanine.template.loader_tags.OverExtendsNode:1
# fd0d976599f14306be6b27d266761868
msgid "Allows the template ``foo/bar.html`` to extend ``foo/bar.html``, given that there is another version of it that can be loaded. This allows templates to be created in a project that extend their app template counterparts, or even app templates that extend other app templates with the same relative name/path."
msgstr ""

#: ../../mezzanine/template/loader_tags.py:docstring of mezzanine.template.loader_tags.OverExtendsNode:7
# 71466b73b99b4f7bafce40f4966688e0
msgid "We use our own version of ``find_template``, that uses an explict list of template directories to search for the template, based on the directories that the known template loaders (``app_directories`` and ``filesystem``) use. This list gets stored in the template context, and each time a template is found, its absolute path gets removed from the list, so that subsequent searches for the same relative name/path can find parent templates in other directories, which allows circular inheritance to occur."
msgstr ""

#: ../../mezzanine/template/loader_tags.py:docstring of mezzanine.template.loader_tags.OverExtendsNode:16
# eddc55121fd64dee8f3a46a800adbee0
msgid "Django's ``app_directories``, ``filesystem``, and ``cached`` loaders are supported. The ``eggs`` loader, and any loader that implements ``load_template_source`` with a source string returned, should also theoretically work."
msgstr ""

#: ../../mezzanine/template/loader_tags.py:docstring of mezzanine.template.loader_tags.OverExtendsNode.find_template:1
# d36e05aa7e7b4c4eb9540e9b163065e0
msgid "Replacement for Django's ``find_template`` that uses the current template context to keep track of which template directories it has used when finding a template. This allows multiple templates with the same relative name/path to be discovered, so that circular template inheritance can occur."
msgstr ""

#: ../../mezzanine/template/loader_tags.py:docstring of mezzanine.template.loader_tags.OverExtendsNode.get_parent:1
# b4dc36c87063401585d8fd0f0a7fc899
msgid "Load the parent template using our own ``find_template``, which will cause its absolute path to not be used again. Then peek at the first node, and if its parent arg is the same as the current parent arg, we know circular inheritance is going to occur, in which case we try and find the template again, with the absolute directory removed from the search list."
msgstr ""

#: ../../mezzanine/template/loader_tags.py:docstring of mezzanine.template.loader_tags.overextends:1
# f323ca04175645e694bcae4d2b2ee925
msgid "Extended version of Django's ``extends`` tag that allows circular inheritance to occur, eg a template can both be overridden and extended at once."
msgstr ""

#: ../packages.rst:396
# 666472426feb41978a37c3f61d354780
msgid "``mezzanine.twitter``"
msgstr ""

#: ../../mezzanine/twitter/__init__.py:docstring of mezzanine.twitter:1
# 7f8b0fef17164f9fac489ab46d215b13
msgid "Provides models and utilities for displaying different types of Twitter feeds."
msgstr ""

#: ../packages.rst:401
# 3b1aee019bd64592aff201e17f51e2fc
msgid "``mezzanine.twitter.models``"
msgstr ""

#: ../../mezzanine/twitter/models.py:docstring of mezzanine.twitter.models.Query:1
# 500a663d44374f599255133b844acbb7
msgid "Query(id, type, value, interested)"
msgstr ""

#: ../../mezzanine/twitter/models.py:docstring of mezzanine.twitter.models.Query.run:1
# 94d290016a1745d190f2981590c39033
msgid "Request new tweets from the Twitter API."
msgstr ""

#: ../../mezzanine/twitter/models.py:docstring of mezzanine.twitter.models.Tweet:1
# 1b06b7fcfca24d4ba12089cd114aae26
msgid "Tweet(id, remote_id, created_at, text, profile_image_url, user_name, full_name, retweeter_profile_image_url, retweeter_user_name, retweeter_full_name, query_id)"
msgstr ""

#: ../packages.rst:407
# d6b1276c012040d6ac6140a44e2eca47
msgid "``mezzanine.twitter.managers``"
msgstr ""

#: ../../mezzanine/twitter/managers.py:docstring of mezzanine.twitter.managers.TweetManager:1
# 7a452ceb75c4483b8488d32a300a2595
msgid "Manager that handles generating the initial ``Query`` instance for a user, list or search term."
msgstr ""

#: ../../mezzanine/twitter/managers.py:docstring of mezzanine.twitter.managers.TweetManager.get_for:1
# fa9806f406a24df7b604e83b98d78613
msgid "Create a query and run it for the given arg if it doesn't exist, and return the tweets for the query."
msgstr ""

#: ../packages.rst:413
# b15d68bfa00d466996cb58b6d7767b17
msgid "``mezzanine.twitter.templatetags.twitter_tags``"
msgstr ""

#: ../../mezzanine/twitter/templatetags/twitter_tags.py:docstring of mezzanine.twitter.templatetags.twitter_tags.tweets_default:1
# 180d6890e009443ba1a9e93b9e192568
msgid "Tweets for the default settings."
msgstr ""

#: ../../mezzanine/twitter/templatetags/twitter_tags.py:docstring of mezzanine.twitter.templatetags.twitter_tags.tweets_for:1
# 6ba17285438a411b81cbe15bdd94e54b
msgid "Retrieve tweets for a user, list or search term. The optional ``per_user`` arg limits the number of tweets per user, for example to allow a fair spread of tweets per user for a list."
msgstr ""

#: ../../mezzanine/twitter/templatetags/twitter_tags.py:docstring of mezzanine.twitter.templatetags.twitter_tags.tweets_for_list:1
# bfaaf632923545dfb7afa38106e7dfcd
msgid "Tweets for a user's list."
msgstr ""

#: ../../mezzanine/twitter/templatetags/twitter_tags.py:docstring of mezzanine.twitter.templatetags.twitter_tags.tweets_for_search:1
# f61b8913453546658d632be88506ded9
msgid "Tweets for a search query."
msgstr ""

#: ../../mezzanine/twitter/templatetags/twitter_tags.py:docstring of mezzanine.twitter.templatetags.twitter_tags.tweets_for_user:1
# 3d836972d0654f2ea87eecdaa614ce4f
msgid "Tweets for a user."
msgstr ""

#: ../packages.rst:419
# e0ee2151a72a4a3ba437171bf7c8c1d4
msgid "``mezzanine.twitter.management.commands``"
msgstr ""

#: ../../mezzanine/twitter/management/commands/poll_twitter.py:docstring of mezzanine.twitter.management.commands.poll_twitter.Command:1
# e948220df32045b0bf58725d10f18ab0
msgid "Polls the Twitter API for tweets associated to the queries in templates."
msgstr ""

#: ../packages.rst:428
# eba22f1f674b40d3bf35e64ae6706e9e
msgid "``mezzanine.utils``"
msgstr ""

#: ../../mezzanine/utils/__init__.py:docstring of mezzanine.utils:1
# 2a5cc85f63f24a308950ccc2933a89dd
msgid "Various utility functions used throughout the different Mezzanine apps."
msgstr ""

#: ../../mezzanine/utils/cache.py:docstring of mezzanine.utils.cache.add_cache_bypass:1
# bf61b93a8c5b49f7b9dac533968dbded
msgid "Adds the current time to the querystring of the URL to force a cache reload. Used for when a form post redirects back to a page that should display updated content, such as new comments or ratings."
msgstr ""

#: ../../mezzanine/utils/cache.py:docstring of mezzanine.utils.cache.cache_get:1
# d8dddecc617d400f8fc066a1af12088b
msgid "Wrapper for ``cache.get``. The expiry time for the cache entry is stored with the entry. If the expiry time has past, put the stale entry back into cache, and don't return it to trigger a fake cache miss."
msgstr ""

#: ../../mezzanine/utils/cache.py:docstring of mezzanine.utils.cache.cache_installed:1
# 54c2aa60e61040adbcd4932eab946a27
msgid "Returns ``True`` if a cache backend is configured, and the cache middlware classes are present."
msgstr ""

#: ../../mezzanine/utils/cache.py:docstring of mezzanine.utils.cache.cache_key_prefix:1
# c99c640d0b0d449a884eaff3aeedf0ff
msgid "Cache key for Mezzanine's cache middleware. Adds the current device and site ID."
msgstr ""

#: ../../mezzanine/utils/cache.py:docstring of mezzanine.utils.cache.cache_set:1
# 90bf819340844f658900807a1dd650a1
msgid "Wrapper for ``cache.set``. Stores the cache entry packed with the desired cache expiry time. When the entry is retrieved from cache, the packed expiry time is also checked, and if past, the stale cache entry is stored again with an expiry that has ``CACHE_SET_DELAY_SECONDS`` added to it. In this case the entry is not returned, so that a cache miss occurs and the entry should be set by the caller, but all other callers will still get the stale entry, so no real cache misses ever occur."
msgstr ""

#: ../../mezzanine/utils/cache.py:docstring of mezzanine.utils.cache.nevercache_token:1
# 5ff489f2504647159989f8da84b8ad05
msgid "Returns the secret token that delimits content wrapped in the ``nevercache`` template tag."
msgstr ""

#: ../../mezzanine/utils/conf.py:docstring of mezzanine.utils.conf.SitesAllowedHosts:1
# 0a86be4bd33645b2a3ed85c20c70ada1
msgid "This is a fallback for Django 1.5's ALLOWED_HOSTS setting which is required when DEBUG is False. It looks up the ``Site`` model and uses any domains added to it, the first time the setting is accessed."
msgstr ""

#: ../../mezzanine/utils/conf.py:docstring of mezzanine.utils.conf.set_dynamic_settings:1
# dad5d7369bc041c6a5d78a469a945412
msgid "Called at the end of the project's settings module, and is passed its globals dict for updating with some final tweaks for settings that generally aren't specified, but can be given some better defaults based on other settings that have been specified. Broken out into its own function so that the code need not be replicated in the settings modules of other project-based apps that leverage Mezzanine's settings module."
msgstr ""

#: ../../mezzanine/utils/device.py:docstring of mezzanine.utils.device.device_from_request:1
# 98cd8f77caf94db89f9e1af54621cd26
msgid "Determine's the device name from the request by first looking for an overridding cookie, and if not found then matching the user agent. Used at both the template level for choosing the template to load and also at the cache level as a cache key prefix."
msgstr ""

#: ../../mezzanine/utils/device.py:docstring of mezzanine.utils.device.templates_for_device:1
# 1e5f47288f0f4cc2a2d1450c8ff3842f
msgid "Given a template name (or list of them), returns the template names as a list, with each name prefixed with the device directory inserted before it's associate default in the list."
msgstr ""

#: ../../mezzanine/utils/docs.py:docstring of mezzanine.utils.docs:1
# a68505a22a1f403fa6e312d4effc28c9
msgid "Utils called from project_root/docs/conf.py when Sphinx documentation is generated."
msgstr ""

#: ../../mezzanine/utils/docs.py:docstring of mezzanine.utils.docs.build_changelog:1
# 6a256e7163cb4ba08cf8cbf2754c37c7
msgid "Converts Mercurial commits into a changelog in RST format."
msgstr ""

#: ../../mezzanine/utils/docs.py:docstring of mezzanine.utils.docs.build_modelgraph:1
# 795e26810aec44eebbd2fd7a32019bb1
msgid "Creates a diagram of all the models for mezzanine and the given package name, generates a smaller version and add it to the docs directory for use in model-graph.rst"
msgstr ""

#: ../../mezzanine/utils/docs.py:docstring of mezzanine.utils.docs.build_requirements:1
# 948ff8a1b1a04d9cb82763614b741c31
msgid "Updates the requirements file with Mezzanine's version number."
msgstr ""

#: ../../mezzanine/utils/docs.py:docstring of mezzanine.utils.docs.build_settings_docs:1
# 80bec2cb015940f8a4aaaa1d7d40571b
msgid "Converts names, descriptions and defaults for settings in ``mezzanine.conf.registry`` into RST format for use in docs, optionally filtered by setting names with the given prefix."
msgstr ""

#: ../../mezzanine/utils/docs.py:docstring of mezzanine.utils.docs.deep_force_unicode:1
# f804c0bb68904cb3808924aa1f74651a
msgid "Recursively call force_text on value."
msgstr ""

#: ../../mezzanine/utils/email.py:docstring of mezzanine.utils.email.send_approve_mail:1
# 954b5be7882c4e0ba6bd94bd90590b77
msgid "Sends an email to staff in listed in the setting ``ACCOUNTS_APPROVAL_EMAILS``, when a new user signs up and the ``ACCOUNTS_APPROVAL_REQUIRED`` setting is ``True``."
msgstr ""

#: ../../mezzanine/utils/email.py:docstring of mezzanine.utils.email.send_approved_mail:1
# ec02c85860364cfdb03e387c1d40caff
msgid "Sends an email to a user once their ``is_active`` status goes from ``False`` to ``True`` when the ``ACCOUNTS_APPROVAL_REQUIRED`` setting is ``True``."
msgstr ""

#: ../../mezzanine/utils/email.py:docstring of mezzanine.utils.email.send_mail_template:1
# ce1a2efe0e7b407aa0f66eacc7953fe6
msgid "Send email rendering text and html versions for the specified template name using the context dictionary passed in."
msgstr ""

#: ../../mezzanine/utils/email.py:docstring of mezzanine.utils.email.send_verification_mail:1
# 2d2ec6c1911249de8b877f536a6576bc
msgid "Sends an email with a verification link to users when ``ACCOUNTS_VERIFICATION_REQUIRED`` is ```True`` and they're signing up, or when they reset a lost password. The ``verification_type`` arg is both the name of the urlpattern for the verification link, as well as the names of the email templates to use."
msgstr ""

#: ../../mezzanine/utils/email.py:docstring of mezzanine.utils.email.split_addresses:1
# 94a3c9d56923486a84520e5dd40ac084
msgid "Converts a string containing comma separated email addresses into a list of email addresses."
msgstr ""

#: ../../mezzanine/utils/email.py:docstring of mezzanine.utils.email.subject_template:1
# 5c69f3fc0d9b41d3ab89f375df3c0946
msgid "Loads and renders an email subject template, returning the subject string."
msgstr ""

#: ../../mezzanine/utils/html.py:docstring of mezzanine.utils.html.TagCloser:1
# cf020a92ce134c3faf3124edb0e9a74e
msgid "HTMLParser that closes open tags. Takes a HTML string as its first arg, and populate a ``html`` attribute on the parser with the original HTML arg and any required closing tags."
msgstr ""

#: ../../mezzanine/utils/html.py:docstring of mezzanine.utils.html.decode_entities:1
# 059be9d771f84b36b4080d3f76be55b0
msgid "Remove HTML entities from a string. Adapted from http://effbot.org/zone/re-sub.htm#unescape-html"
msgstr ""

#: ../../mezzanine/utils/html.py:docstring of mezzanine.utils.html.thumbnails:1
# 4b6a69b9b66441ccbffa2f14f7127407
msgid "Given a HTML string, converts paths in img tags to thumbnail paths, using Mezzanine's ``thumbnail`` template tag. Used as one of the default values in the ``RICHTEXT_FILTERS`` setting."
msgstr ""

#: ../../mezzanine/utils/importing.py:docstring of mezzanine.utils.importing.import_dotted_path:1
# d9a908e2846a44c2b5541390086833c8
msgid "Takes a dotted path to a member name in a module, and returns the member after importing it."
msgstr ""

#: ../../mezzanine/utils/importing.py:docstring of mezzanine.utils.importing.path_for_import:1
# 0398771dfbe84442a68ad1a69bde6b71
msgid "Returns the directory path for the given package or module."
msgstr ""

#: ../../mezzanine/utils/models.py:docstring of mezzanine.utils.models.AdminThumbMixin:1
# 8317174ba0434f578edd29fa4921e084
msgid "Provides a thumbnail method on models for admin classes to reference in the ``list_display`` definition."
msgstr ""

#: ../../mezzanine/utils/models.py:docstring of mezzanine.utils.models.LazyModelOperations:1
# 449e11e4dbe74cb9998e9dc38a19e667
msgid "This class connects itself to Django's class_prepared signal. Pass a function and a model or model name to its ``add()`` method, and the function will be called with the model as its only parameter once the model has been loaded. If the model is already loaded, the function is called immediately."
msgstr ""

#: ../../mezzanine/utils/models.py:docstring of mezzanine.utils.models.LazyModelOperations:7
# da418b7650e94784b4b9d95c53d78345
msgid "Adapted from ``django.db.models.fields.related`` and used in ``mezzanine.generic.fields``."
msgstr ""

#: ../../mezzanine/utils/models.py:docstring of mezzanine.utils.models.LazyModelOperations.add:1
# 9ae861ff99484630aa0854df69d38294
msgid "The function passed to this method should accept n arguments, where n=len(models_or_names). When all the models are ready, the function will be called with the models as arguments, in the order they appear in this argument list."
msgstr ""

#: ../../mezzanine/utils/models.py:docstring of mezzanine.utils.models.LazyModelOperations.model_key:1
# 3818e9624c524ab485e7ff0a6fe1e921
msgid "Returns an (app_label, model_name) tuple from a model or string."
msgstr ""

#: ../../mezzanine/utils/models.py:docstring of mezzanine.utils.models.LazyModelOperations.signal_receiver:1
# 597a391d38814e14a5549a449f40d1a7
msgid "Receive ``class_prepared``, and pass the freshly prepared model to each function waiting for it."
msgstr ""

#: ../../mezzanine/utils/models.py:docstring of mezzanine.utils.models.ModelMixin:1
# 4690cdfd3148416faf8b4509cef1a077
msgid "Used as a subclass for mixin models that inject their behaviour onto models defined outside of a project. The subclass should define an inner ``Meta`` class with a ``mixin_for`` attribute containing the model that will be mixed into."
msgstr ""

#: ../../mezzanine/utils/models.py:docstring of mezzanine.utils.models.ModelMixinBase:1
# e89088c0e1344aa49761a2f28dd0550e
msgid "Metaclass for ``ModelMixin`` which is used for injecting model fields and methods into models defined outside of a project. This currently isn't used anywhere."
msgstr ""

#: ../../mezzanine/utils/models.py:docstring of mezzanine.utils.models.base_concrete_model:1
# c3736d5719874a44a7908bba9d4970a8
msgid "Used in methods of abstract models to find the super-most concrete (non abstract) model in the inheritance chain that inherits from the given abstract model. This is so the methods in the abstract model can query data consistently across the correct concrete model."
msgstr ""

#: ../../mezzanine/utils/models.py:docstring of mezzanine.utils.models.base_concrete_model:6
# 9f59418c7820446c88f4f57475f0742b
msgid "Consider the following::"
msgstr ""

#: ../../mezzanine/utils/models.py:docstring of mezzanine.utils.models.base_concrete_model:25
# b438502c51f94556ac536a8445e517ab
msgid "In actual Mezzanine usage, this allows methods in the ``Displayable`` and ``Orderable`` abstract models to access the ``Page`` instance when instances of custom content types, (eg: models that inherit from ``Page``) need to query the ``Page`` model to determine correct values for ``slug`` and ``_order`` which are only relevant in the context of the ``Page`` model and not the model of the custom content type."
msgstr ""

#: ../../mezzanine/utils/models.py:docstring of mezzanine.utils.models.get_user_model_name:1
# ae763901cb504bd0af9a4824ec4cd56c
msgid "Returns the app_label.object_name string for the user model."
msgstr ""

#: ../../mezzanine/utils/models.py:docstring of mezzanine.utils.models.upload_to:1
# d693c4ede4154ae997ebbbca326a67de
msgid "Used as the ``upload_to`` arg for file fields - allows for custom handlers to be implemented on a per field basis defined by the ``UPLOAD_TO_HANDLERS`` setting."
msgstr ""

#: ../../mezzanine/utils/sites.py:docstring of mezzanine.utils.sites.current_site_id:1
# 5ab227828edd4401b69c31a67f220c22
msgid "Responsible for determining the current ``Site`` instance to use when retrieving data for any ``SiteRelated`` models. If a request is available, and the site can be determined from it, we store the site against the request for subsequent retrievals. Otherwise the order of checks is as follows:"
msgstr ""

#: ../../mezzanine/utils/sites.py:docstring of mezzanine.utils.sites.current_site_id:7
# 4324d61878fc4783a95623bf1caebde9
msgid "``site_id`` in session. Used in the admin so that admin users can switch sites and stay on the same domain for the admin."
msgstr ""

#: ../../mezzanine/utils/sites.py:docstring of mezzanine.utils.sites.current_site_id:9
# 325b2c17f9f6448e8e9a9adcde2bcf36
msgid "host for the current request matched to the domain of the site instance."
msgstr ""

#: ../../mezzanine/utils/sites.py:docstring of mezzanine.utils.sites.current_site_id:11
# 69e8ad7c4c9e4ecc83e1c3268d40f952
msgid "``MEZZANINE_SITE_ID`` environment variable, so management commands or anything else outside of a request can specify a site."
msgstr ""

#: ../../mezzanine/utils/sites.py:docstring of mezzanine.utils.sites.current_site_id:14
# 0cb21515f6114b02a0c7315de354919a
msgid "``SITE_ID`` setting."
msgstr ""

#: ../../mezzanine/utils/sites.py:docstring of mezzanine.utils.sites.has_site_permission:1
# 29683ed1631c4d9681ee01c6e7d30ed3
msgid "Checks if a staff user has staff-level access for the current site. The actual permission lookup occurs in ``SitePermissionMiddleware`` which then marks the request with the ``has_site_permission`` flag, so that we only query the db once per request, so this function serves as the entry point for everything else to check access. We also fall back to an ``is_staff`` check if the middleware is not installed, to ease migration."
msgstr ""

#: ../../mezzanine/utils/sites.py:docstring of mezzanine.utils.sites.host_theme_path:1
# 5aea948aa1ba4f95b7bc4e0b1ac9e65b
msgid "Returns the directory of the theme associated with the given host."
msgstr ""

#: ../../mezzanine/utils/sites.py:docstring of mezzanine.utils.sites.templates_for_host:1
# 0bb1216e30104ec49859b2b4d09b6aa3
msgid "Given a template name (or list of them), returns the template names as a list, with each name prefixed with the device directory inserted into the front of the list."
msgstr ""

#: ../../mezzanine/utils/tests.py:docstring of mezzanine.utils.tests.TestCase:1
# db8915d0ed8c4560b5a085904dbeca9a
msgid "This is the base test case providing common features for all tests across the different apps in Mezzanine."
msgstr ""

#: ../../mezzanine/utils/tests.py:docstring of mezzanine.utils.tests.TestCase.create_recursive_objects:1
# cb33a2048a7f40259a7fe73d7925c6df
msgid "Create multiple levels of recursive objects."
msgstr ""

#: ../../mezzanine/utils/tests.py:docstring of mezzanine.utils.tests.TestCase.queries_used_for_template:1
# 2d32b8363e254c268b6db0a55fa7341e
msgid "Return the number of queries used when rendering a template string."
msgstr ""

#: ../../mezzanine/utils/tests.py:docstring of mezzanine.utils.tests.TestCase.setUp:1
# 41ea73808b4944ee9c8c8a253d2b32c2
msgid "Creates an admin user and sets up the debug cursor, so that we can track the number of queries used in various places."
msgstr ""

#: ../../mezzanine/utils/tests.py:docstring of mezzanine.utils.tests.TestCase.tearDown:1
# f341ada6e630439a82417ec4ce7ea819
msgid "Clean up the admin user created and debug cursor."
msgstr ""

#: ../../mezzanine/utils/tests.py:docstring of mezzanine.utils.tests.copy_test_to_media:1
# 8a2ebafd8c434e66977e461a127de282
msgid "Copies a file from Mezzanine's test data path to MEDIA_ROOT. Used in tests and demo fixtures."
msgstr ""

#: ../../mezzanine/utils/tests.py:docstring of mezzanine.utils.tests.run_pep8_for_package:1
# 2ab9a9ecdb054a05b42009cac9b3fb62
msgid "If pep8 is installed, run it across the given package name returning any warnings or errors found."
msgstr ""

#: ../../mezzanine/utils/tests.py:docstring of mezzanine.utils.tests.run_pyflakes_for_package:1
# 2c8db2cb833b40c4bed78e91e074fa19
msgid "If pyflakes is installed, run it across the given package name returning any warnings found."
msgstr ""

#: ../../mezzanine/utils/timezone.py:docstring of mezzanine.utils.timezone.get_best_local_timezone:1
# 8407b360feb74cefbf1c468acfca25e3
msgid "Compares local timezone offset to pytz's timezone db, to determine a matching timezone name to use when TIME_ZONE is not set."
msgstr ""

#: ../../mezzanine/utils/urls.py:docstring of mezzanine.utils.urls.admin_url:1
# 288fa372e14944faba3691c050753799
msgid "Returns the URL for the given model and admin url name."
msgstr ""

#: ../../mezzanine/utils/urls.py:docstring of mezzanine.utils.urls.home_slug:1
# e16baf5508e14151930a0e07f22fb391
msgid "Returns the slug arg defined for the ``home`` urlpattern, which is the definitive source of the ``url`` field defined for an editable homepage object."
msgstr ""

#: ../../mezzanine/utils/urls.py:docstring of mezzanine.utils.urls.login_redirect:1
# 20df0313914d4644b11b9046e71dab2e
msgid "Returns the redirect response for login/signup. Favors: - next param - LOGIN_REDIRECT_URL setting - homepage"
msgstr ""

#: ../../mezzanine/utils/urls.py:docstring of mezzanine.utils.urls.next_url:1
# 697dfd47222b407b8ffdc221976171cb
msgid "Returns URL to redirect to from the ``next`` param in the request."
msgstr ""

#: ../../mezzanine/utils/urls.py:docstring of mezzanine.utils.urls.path_to_slug:1
# 4a32641708464ce99bebb9d3a0fc8f88
msgid "Removes everything from the given URL path, including language code and ``PAGES_SLUG`` if any is set, returning a slug that would match a ``Page`` instance's slug."
msgstr ""

#: ../../mezzanine/utils/urls.py:docstring of mezzanine.utils.urls.slugify:1
# 1956028418984aab99c4a9392af7903f
msgid "Loads the callable defined by the ``SLUGIFY`` setting, which defaults to the ``slugify_unicode`` function."
msgstr ""

#: ../../mezzanine/utils/urls.py:docstring of mezzanine.utils.urls.slugify_unicode:1
# 07b69623cbec4312ab8c2262115fd6cd
msgid "Replacement for Django's slugify which allows unicode chars in slugs, for URLs in Chinese, Russian, etc. Adopted from https://github.com/mozilla/unicode-slugify/"
msgstr ""

#: ../../mezzanine/utils/urls.py:docstring of mezzanine.utils.urls.unique_slug:1
# f1b15eb6208a41a6a99f39ebb09ad836
msgid "Ensures a slug is unique for the given queryset, appending an integer to its end until the slug is unique."
msgstr ""

#: ../../mezzanine/utils/views.py:docstring of mezzanine.utils.views.ip_for_request:1
# e2d506a3ac7f41b7b97f9690e3c38e80
msgid "Returns ip address for request - first checks ``HTTP_X_FORWARDED_FOR`` header, since app will generally be behind a public web server."
msgstr ""

#: ../../mezzanine/utils/views.py:docstring of mezzanine.utils.views.is_editable:1
# 4edd824956a74c4b911e94b7be517450
msgid "Returns ``True`` if the object is editable for the request. First check for a custom ``editable`` handler on the object, otherwise use the logged in user and check change permissions for the object's model."
msgstr ""

#: ../../mezzanine/utils/views.py:docstring of mezzanine.utils.views.is_spam:1
# e4aa333504b74c6e993cd3b524459ef4
msgid "Main entry point for spam handling - called from the comment view and page processor for ``mezzanine.forms``, to check if posted content is spam. Spam filters are configured via the ``SPAM_FILTERS`` setting."
msgstr ""

#: ../../mezzanine/utils/views.py:docstring of mezzanine.utils.views.is_spam_akismet:1
# ec31597711ae4a36aef530bab88d5e89
msgid "Identifies form data as being spam, using the http://akismet.com service. The Akismet API key should be specified in the ``AKISMET_API_KEY`` setting. This function is the default spam handler defined in the ``SPAM_FILTERS`` setting."
msgstr ""

#: ../../mezzanine/utils/views.py:docstring of mezzanine.utils.views.is_spam_akismet:6
# 77c4e87d0aae44cabc0f7895f9d2daa2
msgid "The name, email, url and comment fields are all guessed from the form fields:"
msgstr ""

#: ../../mezzanine/utils/views.py:docstring of mezzanine.utils.views.is_spam_akismet:9
# 60453d8379104c659d0cf8c8d3c9f1d7
msgid "name: First field labelled \"Name\", also taking i18n into account."
msgstr ""

#: ../../mezzanine/utils/views.py:docstring of mezzanine.utils.views.is_spam_akismet:10
# e513a0206e5846719716b0fcc7582595
msgid "email: First ``EmailField`` field."
msgstr ""

#: ../../mezzanine/utils/views.py:docstring of mezzanine.utils.views.is_spam_akismet:11
# 70ab7cff2874496aa9ac3013dbf85ecf
msgid "url: First ``URLField`` field."
msgstr ""

#: ../../mezzanine/utils/views.py:docstring of mezzanine.utils.views.is_spam_akismet:12
# 6e279fc38d714c2999c05f0bf3a695c5
msgid "comment: First field with a ``Textarea`` widget."
msgstr ""

#: ../../mezzanine/utils/views.py:docstring of mezzanine.utils.views.is_spam_akismet:14
# 76ebf435107a425685c9b32b1fb3fda0
msgid "If the actual comment can't be extracted, spam checking is passed."
msgstr ""

#: ../../mezzanine/utils/views.py:docstring of mezzanine.utils.views.is_spam_akismet:16
# 56726e96a94a468b80c6d859cc673cd4
msgid "The referrer field expects a hidden form field to pass the referrer through, since the HTTP_REFERER will be the URL the form is posted from. The hidden referrer field is made available by default with the ``{% fields_for %}`` templatetag used for rendering form fields."
msgstr ""

#: ../../mezzanine/utils/views.py:docstring of mezzanine.utils.views.paginate:1
# 952b03bf93bf4c0e80d57c8aa55e670c
msgid "Return a paginated page for the given objects, giving it a custom ``visible_page_range`` attribute calculated from ``max_paging_links``."
msgstr ""

#: ../../mezzanine/utils/views.py:docstring of mezzanine.utils.views.render:1
# 9990a81fbaef4e37a7309fdc63bd81b4
msgid "Mimics ``django.shortcuts.render`` but uses a TemplateResponse for ``mezzanine.core.middleware.TemplateForDeviceMiddleware``"
msgstr ""

#: ../../mezzanine/utils/views.py:docstring of mezzanine.utils.views.set_cookie:1
# 5148b2aeb1fb4fe6aa4f7bb3f0f74fe0
msgid "Set cookie wrapper that allows number of seconds to be given as the expiry time, and ensures values are correctly encoded."
msgstr ""


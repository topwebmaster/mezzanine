# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009 - 2014, Stephen McDonald
# This file is distributed under the same license as the Mezzanine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mezzanine 3.1.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-03 10:42+1000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../model-customization.rst:3
# 280e2279ce2f461a8fa7ceb93bcbe758
msgid "Model Customization"
msgstr ""

#: ../model-customization.rst:5
# 6ab56a2ac00c48999699f2acd741934a
msgid "So far under :doc:`content-architecture` the concept of subclassing Mezzanine's models has been described. This section describes the hooks Mezzanine provides for directly modifying the behaviour of its models."
msgstr ""

#: ../model-customization.rst:10
# 7ada227f114540ff9ee35e980616856c
msgid "Field Injection"
msgstr ""

#: ../model-customization.rst:12
# 709d2cd35a9c46a2991e76fa0d088eb9
msgid "Mezzanine provides the setting ``EXTRA_MODEL_FIELDS`` which allows you to define a sequence of fields that will be injected into Mezzanine's (or any library's) models."
msgstr ""

#: ../model-customization.rst:18
# a3e4083f6baf4938be2dffae681c48f2
msgid "Using the following approach comes with certain trade-offs described below in :ref:`field-injection-caveats`. Be sure to fully understand these prior to using the ``EXTRA_MODEL_FIELDS`` setting."
msgstr ""

#: ../model-customization.rst:22
# 52b707e3b9574d2abc61af71ab39683b
msgid "Each item in the ``EXTRA_MODEL_FIELDS`` sequence is a four item sequence. The first two items are the dotted path to the model and its field name to be added, and the dotted path to the field class to use for the field. The third and fourth items are a sequence of positional args and a dictionary of keyword args, to use when creating the field instance."
msgstr ""

#: ../model-customization.rst:29
# 2f9acdfbf7f443399df9afb2942011ae
msgid "For example suppose you want to inject a custom ``ImageField`` from a third party library into Mezzanine's ``BlogPost`` model, you would define the following in your projectsâ€™s settings module::"
msgstr ""

#: ../model-customization.rst:47
# e39ca54bd2604ef498250bd1cb25a57e
msgid "Each ``BlogPost`` instance will now have an ``image`` attribute, using the ``ImageField`` class defined in the fictitious ``somelib.fields`` module."
msgstr ""

#: ../model-customization.rst:50
# f13dc52a65564a4a992425978a11ab8c
msgid "Another interesting example would be adding a field to all of Mezzanine's content types by injecting fields into the ``Page`` class. Continuing on from the previous example, suppose you wanted to add a regular Django ``IntegerField`` to all content types::"
msgstr ""

#: ../model-customization.rst:71
# bfa2d045274c4c1087a3df3f1c04821c
msgid "Note here that the full path for the field class isn't required since a regular Django field is used - the ``django.db.models.`` path is implied."
msgstr ""

#: ../model-customization.rst:77
# fe9ad6fec627404ba21cc468d6ecd7da
msgid "Field Injection Caveats"
msgstr ""

#: ../model-customization.rst:79
# c01906a52d0745e7ae95aad45af2c280
msgid "The above technique provides a great way of avoiding the performance penalties of SQL JOINS required by the traditional approach of `subclassing models <https://docs.djangoproject.com/en/1.3/topics/db/models/#multi-table-inheritance>`_, however some extra consideration is required when used with migration tools like `South <http://south.aeracode.org/>`_. In the first example above, South views the new ``image`` field on the ``BlogPost`` model of the ``mezzanine.blog`` app. As such in order to create a migration for it, the migration must be created for the blog app itself and by default would end up in the migrations directory of the blog app, which completely goes against the notion of not modifying the blog app to add your own custom fields."
msgstr ""

#: ../model-customization.rst:91
# 13fdb1798d5e4e1a88a2698915e25422
msgid "One approach to address this is to use the ``--stdout`` argument of South's ``schemamigration`` command, and create your own migration file located somewhere in your project or app::"
msgstr ""

#: ../model-customization.rst:98
# 9c32010a81bf41d4996b8117b1617559
msgid "Be warned that over time this approach will almost certainly require some manual intervention by way of editing migrations, or modifying the database manually to create the correct state. Ultimately there is a trade-off involved here."
msgstr ""

#: ../model-customization.rst:104
# a077bac4a04b478296cbf6ce771057d3
msgid "Admin Fields"
msgstr ""

#: ../model-customization.rst:106
# 86eb28b48ee541cea6e9bfa632edaf81
msgid "Whether using the above approach to inject fields onto models, or taking the more traditional approach of subclassing models, most often you will also want to expose new fields to the admin interface. This can be achieve by simply unregistering the relevant admin class, subclassing it, and re-registering your new admin class for the associated model. Continuing on from the first example, the code below takes a copy of the ``fieldsets`` definition for the original ``BlogPostAdmin``, and injects our custom field's name into the desired position.::"
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009 - 2014, Stephen McDonald
# This file is distributed under the same license as the Mezzanine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mezzanine 3.1.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-03 10:42+1000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../admin-customization.rst:3
# 9322bf6f9113457a9571c5d69f154b46
msgid "Admin Customization"
msgstr ""

#: ../admin-customization.rst:5
# 3724aba1a0dd4930934267ff232c0541
msgid "Mezzanine uses the standard `Django admin interface <http://docs.djangoproject.com/en/dev/ref/contrib/admin/>`_ allowing you to add admin classes as you normally would with a Django project, but also provides the following enhancements to the admin interface that are configurable by the developer."
msgstr ""

#: ../admin-customization.rst:12
# 491ad14e3f954e70902071e851f19b36
msgid "Navigation"
msgstr ""

#: ../admin-customization.rst:14
# c9efe5536617411dad3b892f46cf88d9
msgid "When first logging into the standard Django admin interface a user is presented with the list of models that they have permission to modify data for. Mezzanine takes this feature and uses it to provide a navigation menu that persists across every section of the admin interface making the list of models always accessible."
msgstr ""

#: ../admin-customization.rst:20
# 13637a5b3d7c43c6ad1616db9d48fcc2
msgid "Using the standard Django admin the grouping and ordering of these models aren't configurable, so Mezzanine provides the setting ``ADMIN_MENU_ORDER`` that can be used to control the grouping and ordering of models when listed in the admin area."
msgstr ""

#: ../admin-customization.rst:25
# ddb89ee6e29b4967a07b85c33e2b16b4
msgid "This setting is a sequence of pairs where each pair represents a group of models. The first item in each pair is the name to give the group and the second item is the sequence of app/model names to use for the group. The ordering of both the groups and their models is maintained when they are displayed in the admin area."
msgstr ""

#: ../admin-customization.rst:31
# 8b2f21eb72ba4945ba08be1a35d0a53e
msgid "For example, to specify two groups ``Content`` and ``Site`` in your admin with the first group containing models from Mezzanine's ``pages`` and ``blog`` apps, and the second with the remaining models provided by Django, you would define the following in your projects's ``settings`` module::"
msgstr ""

#: ../admin-customization.rst:41
# 960836e66de84486b3d25b8ecfb8af8f
msgid "Any admin classes that aren't specifed are included using Django's normal approach of grouping models alphabetically by application name. You can also control this behavior by implementing a ``in_menu`` method on your admin class, which should return ``True`` or ``False``. When implemented, this method controls whether the admin class appears in the menu or not. Here's an advanced example that excludes the ``BlogCategoryAdmin`` class from the menu, unless it is explicitly defined in ``ADMIN_MENU_ORDER``::"
msgstr ""

#: ../admin-customization.rst:68
# eb9477fb40c644269668c1e2811c3374
msgid "Custom Items"
msgstr ""

#: ../admin-customization.rst:70
# 7aca5ac88c4d4d05b2135081505ddae6
msgid "It is possible to inject custom navigation items into the ``ADMIN_MENU_ORDER`` setting by specifying an item using a two item sequence, the first item containing the title and second containing the named urlpattern that resolves to the url to be used."
msgstr ""

#: ../admin-customization.rst:75
# 6282578af3e6439dbca286f1ff2e659a
msgid "Continuing on from the previous example, Mezzanine includes a fork of the popular `django-filebrowser <http://code.google.com/p/django-filebrowser/>`_ application which contains a named urlpattern ``fb_browse`` and is given the title ``Media Library`` to create a custom navigation item::"
msgstr ""

#: ../admin-customization.rst:86
# 1059d7dc8895442fa39243c9549f0bce
msgid "You can also use this two-item sequence approach for regular app/model names if you'd like to give them a custom title."
msgstr ""

#: ../admin-customization.rst:90
# 2f3bac64052a42e4b4afa26539f712f7
msgid "Dashboard"
msgstr ""

#: ../admin-customization.rst:92
# 76d4899781f94f2abe6f6d24d7a8a2a3
msgid "When using the standard Django admin interface, the dashboard area shown when a user first logs in provides the list of available models and a list of the user's recent actions. Mezzanine makes this dashboard configurable by the developer by providing a system for specifying Django `Inclusion Tags <http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#inclusion-tags>`_ that will be displayed in the dashboard area."
msgstr ""

#: ../admin-customization.rst:99
# 245daccee0734565ac91404b016eb26f
msgid "The dashboard area is broken up into three columns, the first being wide and the second and third being narrow. Mezzanine then provides the setting ``DASHBOARD_TAGS`` which is a sequence of three sequences - one for each the three columns. Each sequence contains the names of the inclusion tags in the format ``tag_lib.tag_name`` that will be rendered in each of the columns ."
msgstr ""

#: ../admin-customization.rst:106
# 6c00f53bfd7841d7854495351294096b
msgid "The list of models and recent actions normally found in the Django admin are available as inclusion tags via ``mezzanine_tags.app_list`` and ``mezzanine_tags.recent_actions`` respectively. For example, to configure the dashboard with a blog form above the model list in the first column, a list of recent comments in the second column and the recent actions list in the third column, you would define the following in your projects's ``settings`` module::"
msgstr ""

#: ../admin-customization.rst:120
# f8314fa62bc2404cb00ca90e6c57cdc3
msgid "Here we can see the ``quick_blog`` inclusion tag provided by the ``mezzanine.blog.templatetags.blog_tags`` module and the ``recent_comments`` inclusion tag provided by the ``mezzanine.generic.templatetags.comment_tags`` module."
msgstr ""

#: ../admin-customization.rst:126
# 2d0b83c5686344f38427f92fffb27cd7
msgid "WYSIWYG Editor"
msgstr ""

#: ../admin-customization.rst:128
# cda51a9889ff48f287934e3e4e846e72
msgid "By default, Mezzanine uses the `TinyMCE editor <http://tinymce.moxiecode.com/>`_ to provide rich editing for all model fields of the type ``mezzanine.core.fields.RichTextField``. The setting ``RICHTEXT_WIDGET_CLASS`` contains the import path to the widget class that will be used for editing each of these fields, which therefore provides the ability for implementing your own editor widget which could be a modified version of TinyMCE, a different editor or even no editor at all."
msgstr ""

#: ../admin-customization.rst:139
# 43866c93b19b48d3bc0eb607490be6b6
msgid "If you'd only like to customize the TinyMCE options specified in its JavaScript setup, you can do so via the ``TINYMCE_SETUP_JS`` setting which lets you specify the URL to your own TinyMCE setup JavaScript file."
msgstr ""

#: ../admin-customization.rst:144
# 3b8d7e30035046ada9097e78c7c0bdf8
msgid "The default value for the ``RICHTEXT_WIDGET_CLASS`` setting is the string ``\"mezzanine.core.forms.TinyMceWidget\"``. The ``TinyMceWidget`` class referenced here provides the necessary media files and HTML for implementing the TinyMCE editor, and serves as a good reference point for implementing your own widget class which would then be specified via the ``RICHTEXT_WIDGET_CLASS`` setting."
msgstr ""

#: ../admin-customization.rst:151
# 4b11fb0b944f44e284605d0977ff6917
msgid "In addition to ``RICHTEXT_WIDGET_CLASS`` you may need to customize the way your content is rendered at the template level. Post processing of the content can be achieved through the ``RICHTEXT_FILTERS`` setting, which is a sequence of string, each one containing the dotted path to a Python function, that will be used as a processing pipeline for the content. Think of them like Django's middleware or context processors."
msgstr ""

#: ../admin-customization.rst:158
# 01afdaa7f6514da58bb076a3590cc6ca
msgid "Say, for example, you had a ``RICHTEXT_WIDGET_CLASS`` that allowed you to write your content in a popular wiki syntax such as markdown. You'd need a way to convert that wiki syntax into HTML right before the content was rendered::"
msgstr ""

#: ../admin-customization.rst:177
# 09f0dac161504a559c4c23a5d30e2525
msgid "With the above, you'd now see the converted HTML content rendered to the template, rather than the raw markdown formatting."
msgstr ""

#: ../admin-customization.rst:181
# 7d8cf9d900c24156862805450d0236e3
msgid "Media Library Integration"
msgstr ""

#: ../admin-customization.rst:183
# 1dd75fcdf0b247d8b641c1a4bd65a664
msgid "Mezzanine's Media Library (based on django-filebrowser) provides a `jQuery UI <http://jqueryui.com/>`_ `dialog <http://jqueryui.com/dialog/>`_ that can be used by custom widgets to allow users to select previously uploaded files."
msgstr ""

#: ../admin-customization.rst:187
# fc0bbeb6b4534eb991f04c6cfec048f0
msgid "When using a custom widget for the WYSIWYG editor via the ``RICHTEXT_WIDGET_CLASS`` setting, you can show the Media Library dialog from your custom widget, by doing the following:"
msgstr ""

#: ../admin-customization.rst:191
# 18b2f532263946b0b9080bdbfba700c8
msgid "Load the following media resources in your widget, perhaps using a `Django Media inner class <https://docs.djangoproject.com/en/dev/topics/forms/media/>`_:"
msgstr ""

#: ../admin-customization.rst:196
# f2d64c03c0f948a49a0c7b30fa188250
msgid "``filebrowser/css/smoothness/jquery-ui-1.9.1.custom.min.css``"
msgstr ""

#: ../admin-customization.rst:202
# 2c6a777153dd42fcbad08b7e56ab12ec
msgid "Call the JavaScript function ``browseMediaLibrary`` to show the dialog. The function is defined in ``filebrowser/js/filebrowser-popup.js``, and takes the following two arguments:"
msgstr ""

#: ../admin-customization.rst:208
# 15ad331efe57433bbfe3f738ce7b888c
msgid "The function that will be called after the dialog is closed. The function will be called with a single argument, which will be:"
msgstr ""

#: ../admin-customization.rst:211
# 1e146c8220814013acde877e42c8fe2a
msgid "null: if no selection was made (e.g. dialog is closed by hitting `ESC`), or"
msgstr ""

#: ../admin-customization.rst:213
# b735c87824464337a7fc27e2df622a7a
msgid "the path of the selected file."
msgstr ""

#: ../admin-customization.rst:215
# c069466ac0544bd5be6298453c3fdf1c
msgid "Type of files that are selectable in the dialog. Defaults to image."
msgstr ""

